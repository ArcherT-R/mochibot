<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Mochi Bar Dashboard</title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
<link rel="icon" type="image/png" href="https://i.ibb.co/S4NjLxNL/Gemini-Generated-Image-hbcyjkhbcyjkhbcy-removebg-preview.png">
<style>
  body { font-family: 'Roboto', sans-serif; margin:0; background:#f7f9fc; color:#000; }
  header {
    background: linear-gradient(90deg, #42b4ff, #1a85e6, #42b4ff, #1a85e6);
    background-size: 300% 100%;
    animation: gradientFlow 6s ease infinite;
    color:white; font-weight:700; font-size:48px; padding:25px 40px; text-align:center;
    box-shadow:0 2px 5px rgba(0,0,0,0.15);
  }
  @keyframes gradientFlow { 0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%} }
  .nav-tabs {
    background:white; display:flex; justify-content:space-between; align-items:center;
    gap:10px; padding:15px 20px; box-shadow:0 2px 5px rgba(0,0,0,0.05); border-bottom:2px solid #e0e6f0; flex-wrap:wrap;
  }
  .nav-buttons { display:flex; gap:10px; flex-wrap:wrap; }
  .tab-button { display:flex; align-items:center; gap:8px; padding:12px 24px; background:transparent; border:none; border-radius:8px; cursor:pointer; font-size:16px; font-weight:600; color:#555; transition:all 0.3s; }
  .tab-button:hover { background:#f0f8ff; color:#42b4ff; }
  .tab-button.active { background:#42b4ff; color:white; }
  .tab-icon { font-size:20px; }
  .container { max-width:1200px; margin:40px auto; padding:0 20px; display:flex; flex-direction:column; gap:40px; }
  h2 { font-size:26px; font-weight:700; margin-bottom:20px; color:#333; }
  .content-section { background:#fff; padding:20px; border-radius:12px; box-shadow:0 6px 15px rgba(0,0,0,0.05); border:1px solid #ddd; }
  .search-wrapper { position:relative; max-width:300px; flex-grow:1; }
  .search-wrapper input { width:100%; padding:10px 15px; font-size:15px; border:1px solid #ccc; border-radius:8px; outline:none; box-sizing:border-box; transition:border 0.2s; }
  .search-wrapper input:focus { border-color:#42b4ff; }
  .suggestions { position:absolute; top:100%; left:0; width:100%; background:white; border:1px solid #ccc; max-height:250px; overflow-y:auto; z-index:10; border-radius:0 0 8px 8px; box-shadow:0 4px 10px rgba(0,0,0,0.1); }
  .suggestion-item { display:flex; align-items:center; padding:10px 12px; cursor:pointer; border-bottom:1px solid #eee; transition:background 0.2s; }
  .suggestion-item:last-child { border-bottom:none; }
  .suggestion-item:hover { background:#f0f8ff; }
  .suggestion-item img { width:40px; height:40px; border-radius:50%; margin-right:10px; }
  .no-data { text-align:center; color:#888; padding:20px; font-style:italic; }

  /* Top Players */
  .top-players-grid { display:grid; grid-template-columns:repeat(auto-fit, minmax(200px,1fr)); gap:20px; justify-items:center; }
  .player-card { background:#f9f9f9; text-align:center; padding:15px; border-radius:12px; font-weight:600; cursor:pointer; border:1px solid #eee; transition:transform 0.2s, box-shadow 0.2s; width:100%; max-width:220px; }
  .player-card:hover { transform:translateY(-4px); box-shadow:0 8px 20px rgba(0,0,0,0.1); }
  .player-card img { width:80px; height:80px; border-radius:50%; margin-bottom:10px; object-fit:cover; background:#e0e6f0; }
  .player-card .time { font-size:0.9em; font-weight:500; color:#555; margin-top:4px; }
  .player-card .live-status { color:#28a745; font-weight:700; font-size:0.8em; display:block; margin-bottom:4px; }

  /* Shifts - Compact Cards */
  .shifts-list { display:flex; flex-direction:column; gap:16px; }
  .shift-card { 
    background:linear-gradient(135deg,#f0f8ff 0%,#e6f3ff 100%);
    padding:18px 20px;
    border-radius:10px;
    border-left:4px solid #42b4ff;
    box-shadow:0 2px 8px rgba(0,0,0,0.05);
    cursor:pointer;
    transition:all 0.3s;
  }
  .shift-card:hover { 
    transform:translateX(5px); 
    box-shadow:0 4px 12px rgba(0,0,0,0.12);
  }
  
  .shift-header { display:flex; justify-content:space-between; align-items:center; }
  .shift-left { display:flex; align-items:center; gap:12px; flex:1; }
  .shift-icon { font-size:28px; }
  .shift-info { display:flex; flex-direction:column; gap:4px; }
  .shift-datetime { font-weight:700; font-size:18px; color:#1a85e6; }
  .shift-host-preview { font-size:14px; color:#555; }
  .shift-arrow { font-size:20px; color:#42b4ff; }

  /* Modal */
  .modal {
    display:none;
    position:fixed;
    z-index:1000;
    left:0;
    top:0;
    width:100%;
    height:100%;
    background-color:rgba(0,0,0,0.6);
    animation:fadeIn 0.3s;
  }
  @keyframes fadeIn { from{opacity:0} to{opacity:1} }
  
  .modal-content {
    background-color:white;
    margin:5% auto;
    padding:0;
    border-radius:12px;
    width:90%;
    max-width:600px;
    box-shadow:0 10px 40px rgba(0,0,0,0.3);
    animation:slideIn 0.3s;
    max-height:85vh;
    overflow-y:auto;
  }
  @keyframes slideIn { from{transform:translateY(-50px);opacity:0} to{transform:translateY(0);opacity:1} }
  
  .modal-header {
    display:flex;
    justify-content:space-between;
    align-items:center;
    padding:25px 30px;
    border-bottom:2px solid #42b4ff;
    background:linear-gradient(135deg,#f0f8ff 0%,#e6f3ff 100%);
  }
  .modal-title { font-size:24px; font-weight:700; color:#1a85e6; }
  .close {
    color:#aaa;
    font-size:32px;
    font-weight:bold;
    cursor:pointer;
    transition:color 0.2s;
    line-height:1;
  }
  .close:hover { color:#333; }
  
  .modal-body { padding:25px 30px; }
  
  .shift-roles-section { margin-bottom:25px; }
  .shift-roles-section h4 { 
    font-size:16px; 
    font-weight:700; 
    color:#333; 
    margin:0 0 12px 0;
    text-transform:uppercase;
    letter-spacing:0.5px;
  }
  .role-item {
    display:flex;
    align-items:center;
    gap:10px;
    padding:10px 14px;
    background:#f9f9f9;
    border-radius:8px;
    border:1px solid #e0e6f0;
    margin-bottom:8px;
  }
  .role-label { font-weight:600; color:#555; min-width:90px; }
  .role-name { color:#333; }
  
  .attendees-section h4 {
    font-size:16px;
    font-weight:700;
    color:#333;
    margin:0 0 12px 0;
    display:flex;
    align-items:center;
    gap:8px;
    text-transform:uppercase;
    letter-spacing:0.5px;
  }
  .attendee-count {
    background:#42b4ff;
    color:white;
    padding:2px 8px;
    border-radius:12px;
    font-size:12px;
    font-weight:700;
  }
  .attendees-container { display:flex; flex-direction:column; gap:8px; }
  .attendee-box {
    display:flex;
    justify-content:space-between;
    align-items:center;
    padding:10px 14px;
    border-radius:8px;
    background:#fff;
    border:1px solid #e0e6f0;
    transition:all 0.2s;
  }
  .attendee-box:hover { background:#f9f9f9; border-color:#42b4ff; }
  .attendee-box span { font-weight:500; color:#333; }
  .attendee-box button {
    background:#ff4444;
    border:none;
    border-radius:6px;
    color:white;
    font-weight:700;
    padding:4px 10px;
    cursor:pointer;
    transition:background 0.2s;
  }
  .attendee-box button:hover { background:#cc0000; }
  
  .add-attendee-box {
    display:flex;
    justify-content:center;
    align-items:center;
    padding:12px;
    border-radius:8px;
    background:#e6f3ff;
    cursor:pointer;
    font-weight:600;
    color:#1a85e6;
    border:2px dashed #42b4ff;
    transition:all 0.2s;
    margin-top:8px;
  }
  .add-attendee-box:hover { background:#d0e4ff; border-color:#1a85e6; }

  .tab-content { display:none; }
  .tab-content.active { display:block; }

  @media(max-width:600px){
    header { font-size:36px; padding:20px; }
    h2 { text-align:center; }
    .top-players-grid { grid-template-columns:1fr; }
    .nav-tabs { flex-direction:column; gap:10px; }
    .nav-buttons { width:100%; justify-content:center; }
    .search-wrapper { width:100%; max-width:100%; }
    .tab-button { padding:10px 16px; font-size:14px; }
    .shift-header { flex-direction:column; align-items:flex-start; gap:10px; }
    .modal-content { margin:10% auto; width:95%; }
    .modal-header, .modal-body { padding:20px; }
  }
</style>
</head>
<body>
<header>Mochi Bar Dashboard</header>

<nav class="nav-tabs">
  <div class="nav-buttons">
    <button class="tab-button active" data-tab="home"><span class="tab-icon">üè†</span>Home</button>
    <button class="tab-button" data-tab="playerlist"><span class="tab-icon">üë•</span>Player List</button>
    <button class="tab-button" data-tab="shifts"><span class="tab-icon">üìÖ</span>Shifts</button>
    <button class="tab-button" data-tab="myaccount"><span class="tab-icon">üë§</span>My Account</button>
    <button class="tab-button" data-tab="settings"><span class="tab-icon">‚öôÔ∏è</span>Settings</button>
  </div>
  <div class="search-wrapper">
    <input type="text" id="playerSearch" placeholder="Search Roblox username...">
    <div id="suggestions" class="suggestions"></div>
  </div>
</nav>

<div class="container">
  <!-- HOME TAB -->
  <div id="home" class="tab-content active">
    <section class="content-section">
      <h2>Top Active This Week</h2>
      <div id="topPlayersGrid" class="top-players-grid"></div>
    </section>
    
    <section class="content-section">
      <h2>Top 3 Shift Leaders</h2>
      <div id="topShiftLeaders" class="top-players-grid"></div>
    </section>
  </div>

  <!-- PLAYER LIST TAB -->
  <div id="playerlist" class="tab-content">
    <section class="content-section">
      <h2>Player List</h2>
      <div id="fullPlayerList" class="top-players-grid"></div>
    </section>
  </div>

  <!-- SHIFTS TAB -->
  <div id="shifts" class="tab-content">
    <section class="content-section">
      <h2>Weekly Shifts</h2>
      <div id="shiftsList" class="shifts-list"></div>
    </section>
  </div>

  <!-- MY ACCOUNT TAB -->
  <div id="myaccount" class="tab-content">
    <section class="content-section">
      <h2>My Account</h2>
      <% if (player) { %>
        <p>View your full profile and session stats:</p>
        <a href="/dashboard/player/<%= player.username %>" class="btn btn-primary">Go to My Profile</a>
      <% } else { %>
        <p>Please log in to view your account.</p>
      <% } %>
    </section>
  </div>

  <!-- SETTINGS TAB -->
  <div id="settings" class="tab-content">
    <section class="content-section">
      <h2>Settings</h2>
      <div class="no-data">Settings panel coming soon...</div>
    </section>
  </div>
</div>

<!-- Shift Modal -->
<div id="shiftModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span class="modal-title" id="modalShiftTitle"></span>
      <span class="close" onclick="closeShiftModal()">&times;</span>
    </div>
    <div class="modal-body">
      <div class="shift-roles-section">
        <h4>Shift Roles</h4>
        <div id="modalRoles"></div>
      </div>
      
      <div class="attendees-section">
        <h4>Attendees <span class="attendee-count" id="modalAttendeeCount">0</span></h4>
        <div class="attendees-container" id="modalAttendees"></div>
        <div class="add-attendee-box" id="modalAddAttendee">+ Add attendee</div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('playerSearch');
  const suggestionsBox = document.getElementById('suggestions');
  const shiftsList = document.getElementById('shiftsList');
  const topPlayersGrid = document.getElementById('topPlayersGrid');
  const fullPlayerList = document.getElementById('fullPlayerList');
  const shiftModal = document.getElementById('shiftModal');

  let currentShiftId = null;
  let currentUser = null;

  // ------------------- Get Current User -------------------
  const LEADERSHIP_RANKS = [
    'Chairman', 'Vice Chairman', 'Chief Administrative Officer', 'Developer',
    'Chief of Operations', 'Chief of Human Resources', 'Chief Of Public Relations',
    'Head Corporate', 'Senior Corporate', 'Junior Corporate', 'Corporate Intern'
  ];

  const CORPORATE_RANKS = [
    'Head Corporate', 'Senior Corporate', 'Junior Corporate', 'Corporate Intern'
  ];

  const CHIEF_RANKS = [
    'Chairman', 'Vice Chairman', 'Chief Administrative Officer', 'Developer',
    'Chief of Operations', 'Chief of Human Resources', 'Chief Of Public Relations',
    'Automation'
  ];

  const EXECUTIVE_RANKS = ['Chairman', 'Vice Chairman'];

  async function loadCurrentUser() {
    try {
      const res = await fetch('/dashboard/current-user');
      if (res.ok) {
        currentUser = await res.json();
        const rank = currentUser.group_rank || currentUser.rank;
        console.log('Current user data:', currentUser);
        console.log('Current user rank:', rank);
        console.log('Has Leadership Rank:', hasLeadershipRank());
        console.log('Has Chief Rank:', hasChiefRank());
        console.log('Has Executive Rank:', hasExecutiveRank());
        updateTabAccess();
        lockSearchIfNeeded();
      }
    } catch (err) {
      console.error('Failed to load current user:', err);
    }
  }

  function hasLeadershipRank() {
    if (!currentUser) return false;
    const rank = currentUser.group_rank || currentUser.rank;
    return LEADERSHIP_RANKS.includes(rank);
  }

  function hasChiefRank() {
    if (!currentUser) return false;
    const rank = currentUser.group_rank || currentUser.rank;
    return CHIEF_RANKS.includes(rank);
  }

  function hasCorporateRank() {
    if (!currentUser) return false;
    const rank = currentUser.group_rank || currentUser.rank;
    return CORPORATE_RANKS.includes(rank);
  }

  function hasExecutiveRank() {
    if (!currentUser) return false;
    const rank = currentUser.group_rank || currentUser.rank;
    return EXECUTIVE_RANKS.includes(rank);
  }

  function updateTabAccess() {
    const playerlistTab = document.querySelector('[data-tab="playerlist"]');
    const settingsTab = document.querySelector('[data-tab="settings"]');

    if (!playerlistTab || !settingsTab) return;

    // Player List - requires leadership rank
    if (!hasLeadershipRank()) {
      playerlistTab.style.opacity = '0.5';
      playerlistTab.style.cursor = 'not-allowed';
      playerlistTab.title = 'Requires Leadership rank';
    } else {
      playerlistTab.style.opacity = '1';
      playerlistTab.style.cursor = 'pointer';
      playerlistTab.title = '';
    }

    // Settings - requires executive rank (Chairman/Vice Chairman)
    if (!hasExecutiveRank()) {
      settingsTab.style.opacity = '0.5';
      settingsTab.style.cursor = 'not-allowed';
      settingsTab.title = 'Requires Chairman or Vice Chairman';
    } else {
      settingsTab.style.opacity = '1';
      settingsTab.style.cursor = 'pointer';
      settingsTab.title = '';
    }
  }

  // ------------------- Lock Search for Non-Leadership -------------------
  function lockSearchIfNeeded() {
    if (!hasLeadershipRank()) {
      input.disabled = true;
      input.placeholder = 'Requires Leadership rank';
      suggestionsBox.innerHTML = '';
    }
  }

  // ------------------- Tabs -------------------
  document.querySelectorAll('.tab-button').forEach(btn => {
    btn.addEventListener('click', () => {
      const tab = btn.dataset.tab;

      // Allow unrestricted tabs to switch freely
      if (tab === 'home' || tab === 'shifts' || tab === 'myaccount') {
        document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        btn.classList.add('active');
        document.getElementById(tab).classList.add('active');
        return;
      }

      // Check access permissions for restricted tabs
      if (tab === 'playerlist' && !hasLeadershipRank()) {
        alert('Access Denied: Player List requires Leadership rank');
        return;
      }

      if (tab === 'settings' && !hasExecutiveRank()) {
        alert('Access Denied: Settings requires Chairman or Vice Chairman rank');
        return;
      }

      // Switch tab
      document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
      btn.classList.add('active');
      document.getElementById(tab).classList.add('active');
    });
  });

  loadCurrentUser();

  // ------------------- Player Search -------------------
  input.addEventListener('input', async () => {
    if (!hasLeadershipRank()) return; // extra safety
    const q = input.value.trim();
    if (!q) { suggestionsBox.innerHTML = ''; return; }
    try {
      const res = await fetch(`/dashboard/search?username=${encodeURIComponent(q)}`);
      const players = res.ok ? await res.json() : [];
      suggestionsBox.innerHTML = players.map(p => `
        <div class="suggestion-item" onclick="window.location='/dashboard/player/${p.username}'">
          <img src="https://www.roblox.com/headshot-thumbnail/image?userId=${p.roblox_id}&width=40&height=40&format=png"
               onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';"/>
          <span>${p.username}</span>
        </div>`).join('');
    } catch (err) { suggestionsBox.innerHTML = ''; console.error(err); }
  });

  document.addEventListener('click', e => {
    if (!input.contains(e.target) && !suggestionsBox.contains(e.target)) suggestionsBox.innerHTML = '';
  });

  // ------------------- Top Players -------------------
  let topPlayersData = [];

  function calculateLiveMinutes(player){
    if(player.ongoing_session_start_time){
      const elapsed = Date.now() - new Date(player.ongoing_session_start_time).getTime();
      return elapsed > 0 ? elapsed / 1000 / 60 : 0;
    }
    return 0;
  }

  function getTotalMinutes(player){ return (player.weekly_minutes || 0) + calculateLiveMinutes(player); }

  function formatMinutes(total){
    if(total < 1) return '0 min';
    const mins = Math.round(total), h = Math.floor(mins / 60), m = mins % 60;
    return h > 0 ? `${h} hr ${m} min` : `${m} min`;
  }

  async function renderTopPlayers(){
    try{
      const res = await fetch('/dashboard/top-players');
      topPlayersData = res.ok ? await res.json() : topPlayersData;
      if(!topPlayersData.length){
        topPlayersGrid.innerHTML = '<div class="no-data">No active players data.</div>';
        return;
      }
      const livePlayers = topPlayersData
        .map(p => ({...p, live_total_minutes: getTotalMinutes(p), is_live: calculateLiveMinutes(p) > 0}))
        .sort((a,b) => b.live_total_minutes - a.live_total_minutes)
        .slice(0,3);

      topPlayersGrid.innerHTML = livePlayers.map(p => `
        <div class="player-card" onclick="window.location='/dashboard/player/${p.username}'">
          <img src="${p.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U'}"
               onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
          <div>${p.username}</div>
          ${p.is_live ? '<span class="live-status">LIVE</span>' : ''}
          <div class="time">${formatMinutes(p.live_total_minutes)}</div>
        </div>`).join('');
    } catch(err){ console.error(err); }
  }
  renderTopPlayers();
  setInterval(renderTopPlayers, 5000);

  // ------------------- Top Shift Leaders -------------------
  async function renderTopShiftLeaders(){
    try{
      const shiftsRes = await fetch('/shifts');
      const shifts = shiftsRes.ok ? await shiftsRes.json() : [];
      
      const attendeesPromises = shifts.map(async shift => {
        try {
          const res = await fetch(`/shifts/attendees?shiftId=${shift.id}`);
          return res.ok ? await res.json() : [];
        } catch {
          return [];
        }
      });
      
      const allAttendeesArrays = await Promise.all(attendeesPromises);
      
      // Count shift participation per username
      const participationCount = {};
      
      shifts.forEach((shift, index) => {
        const attendees = allAttendeesArrays[index];
        
        // Count host
        if (shift.host && shift.host !== 'TBD') {
          participationCount[shift.host] = (participationCount[shift.host] || 0) + 1;
        }
        
        // Count co-host
        if (shift.cohost) {
          participationCount[shift.cohost] = (participationCount[shift.cohost] || 0) + 1;
        }
        
        // Count overseer
        if (shift.overseer) {
          participationCount[shift.overseer] = (participationCount[shift.overseer] || 0) + 1;
        }
        
        // Count attendees
        attendees.forEach(attendee => {
          participationCount[attendee.username] = (participationCount[attendee.username] || 0) + 1;
        });
      });
      
      // Convert to array and sort
      const sortedLeaders = Object.entries(participationCount)
        .map(([username, count]) => ({ username, count }))
        .sort((a, b) => b.count - a.count)
        .slice(0, 3);
      
      const topShiftLeadersGrid = document.getElementById('topShiftLeaders');
      
      if(!sortedLeaders.length){
        topShiftLeadersGrid.innerHTML = '<div class="no-data">No shift participation data.</div>';
        return;
      }
      
      // Fetch player details for avatars
      const playersRes = await fetch('/dashboard/players');
      const allPlayers = playersRes.ok ? await playersRes.json() : [];
      
      topShiftLeadersGrid.innerHTML = sortedLeaders.map(leader => {
        const player = allPlayers.find(p => p.username === leader.username);
        const avatarUrl = player?.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';
        
        return `
          <div class="player-card" onclick="window.location='/dashboard/player/${leader.username}'">
            <img src="${avatarUrl}"
                 onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
            <div>${leader.username}</div>
            <div class="time">${leader.count} shift${leader.count !== 1 ? 's' : ''}</div>
          </div>`;
      }).join('');
    } catch(err){ 
      console.error('Error loading shift leaders:', err); 
      document.getElementById('topShiftLeaders').innerHTML = '<div class="no-data">Failed to load shift leaders.</div>';
    }
  }
  renderTopShiftLeaders();
  setInterval(renderTopShiftLeaders, 60000);

  // ------------------- Full Player List -------------------
  async function renderFullPlayers(){
    try {
      const res = await fetch('/dashboard/players');
      const players = res.ok ? await res.json() : [];
      if(!players.length){
        fullPlayerList.innerHTML = '<div class="no-data">No players found.</div>';
        return;
      }
      fullPlayerList.innerHTML = players.map(p => `
        <div class="player-card" onclick="window.location='/dashboard/player/${p.username}'">
          <img src="${p.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U'}"
               onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
          <div>${p.username}</div>
        </div>`).join('');
    } catch(err){ console.error(err); fullPlayerList.innerHTML = '<div class="no-data">Failed to load players.</div>'; }
  }
  renderFullPlayers();

  // ------------------- Shifts -------------------
  function formatShiftTime(ts){
    const d = new Date(ts);
    const now = new Date();
    const tomorrow = new Date(); tomorrow.setDate(tomorrow.getDate() + 1);
    let dateStr = d.toDateString() === now.toDateString() ? 'Today'
                : d.toDateString() === tomorrow.toDateString() ? 'Tomorrow'
                : d.toLocaleDateString(undefined,{weekday:'long',month:'long',day:'numeric'});
    const timeStr = d.toLocaleTimeString(undefined,{hour:'numeric',minute:'2-digit',hour12:true});
    return {date: dateStr, time: timeStr};
  }

  async function openShiftModal(shift) {
    currentShiftId = shift.id;
    const shiftTime = shift.shift_time || shift.time;
    const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
    const {date, time} = formatShiftTime(new Date(timestamp));
    
    document.getElementById('modalShiftTitle').textContent = `${date} at ${time}`;
    
    // Render roles
    let rolesHTML = `<div class="role-item"><span class="role-label">üìã Host:</span><span class="role-name">${shift.host || 'TBD'}</span></div>`;
    if(shift.cohost) rolesHTML += `<div class="role-item"><span class="role-label">ü§ù Co-Host:</span><span class="role-name">${shift.cohost}</span></div>`;
    if(shift.overseer) rolesHTML += `<div class="role-item"><span class="role-label">üëÅÔ∏è Overseer:</span><span class="role-name">${shift.overseer}</span></div>`;
    document.getElementById('modalRoles').innerHTML = rolesHTML;
    
    // Load attendees
    await renderModalAttendees();
    
    shiftModal.style.display = 'block';
  }

  async function renderModalAttendees() {
    if (!currentShiftId) return;
    
    const container = document.getElementById('modalAttendees');
    const addBox = document.getElementById('modalAddAttendee');
    
    try {
      const res = await fetch(`/shifts/attendees?shiftId=${currentShiftId}`);
      const attendees = res.ok ? await res.json() : [];
      
      // Get shift details to check if user is host/cohost/overseer
      const shiftRes = await fetch('/shifts');
      const shifts = shiftRes.ok ? await shiftRes.json() : [];
      const currentShift = shifts.find(s => s.id === currentShiftId);
      
      const isShiftLeader = currentShift && currentUser && (
        currentShift.host === currentUser.username ||
        currentShift.cohost === currentUser.username ||
        currentShift.overseer === currentUser.username
      );
      
      // Chiefs and Chairmans can always edit
      // Corporate can only edit if they're a shift leader (host/cohost/overseer)
      // Directors cannot edit at all
      const canEdit = hasChiefRank() || (hasCorporateRank() && isShiftLeader);
      
      document.getElementById('modalAttendeeCount').textContent = attendees.length;
      
      container.innerHTML = '';
      attendees.forEach(a => {
        const box = document.createElement('div');
        box.className = 'attendee-box';
        
        if (canEdit) {
          box.innerHTML = `<span>${a.username}</span><button data-robloxid="${a.roblox_id}">√ó</button>`;
          box.querySelector('button').addEventListener('click', async (e) => {
            e.stopPropagation();
            await fetch('/shifts/remove-attendee', {
              method:'POST',
              headers:{'Content-Type':'application/json'},
              body: JSON.stringify({shiftId: currentShiftId, robloxId: a.roblox_id})
            });
            renderModalAttendees();
          });
        } else {
          box.innerHTML = `<span>${a.username}</span>`;
        }
        
        container.appendChild(box);
      });

      if (canEdit) {
        addBox.style.display = 'flex';
        addBox.onclick = async e => {
          e.stopPropagation();
          if(addBox.querySelector('select')) return;

          const res = await fetch('/dashboard/players');
          const allPlayers = res.ok ? await res.json() : [];
          
          // Filter to rank 199+ only
          const eligiblePlayers = allPlayers.filter(p => (p.group_rank_number || 0) >= 199);
          
          const select = document.createElement('select');
          select.style.width = '100%';
          select.style.padding = '8px';
          select.style.fontSize = '14px';
          select.style.border = '1px solid #42b4ff';
          select.style.borderRadius = '6px';
          select.innerHTML = '<option value="">Select player (Rank 199+)...</option>' + eligiblePlayers.map(p => `<option value="${p.roblox_id}|${p.username}">${p.username}</option>`).join('');

          addBox.style.background = '#fff';
          addBox.style.border = '2px solid #42b4ff';
          addBox.innerHTML = '';
          addBox.appendChild(select);
          select.focus();

          select.onchange = async () => {
            if(select.value){
              const [robloxId, username] = select.value.split('|');
              await fetch('/shifts/add-attendee', {
                method:'POST',
                headers:{'Content-Type':'application/json'},
                body: JSON.stringify({shiftId: currentShiftId, robloxId, username})
              });
              await renderModalAttendees();
            } else resetAddBox();
          };

          select.onblur = () => setTimeout(resetAddBox, 200);

          function resetAddBox(){
            addBox.style.background = '#e6f3ff';
            addBox.style.border = '2px dashed #42b4ff';
            addBox.innerHTML = '+ Add attendee';
          }
        };
      } else {
        addBox.style.display = 'none';
      }
    } catch(err) {
      console.error('Error loading attendees:', err);
    }
  }

  window.closeShiftModal = function() {
    shiftModal.style.display = 'none';
    currentShiftId = null;
  };

  window.onclick = function(e) {
    if (e.target === shiftModal) closeShiftModal();
  };

  async function loadShifts(){
    shiftsList.innerHTML = `<div class="no-data">Fetching shifts...</div>`;
    try{
      const res = await fetch('/shifts');
      if(!res.ok) throw new Error(`HTTP ${res.status}`);
      const shifts = await res.json();

      const now = Date.now();

      // Show ALL shifts (past + upcoming)
      const sortedShifts = shifts.sort((a,b)=> {
        const timeA = a.shift_time || a.time;
        const timeB = b.shift_time || b.time;
        const tsA = timeA.toString().length === 10 ? timeA * 1000 : timeA;
        const tsB = timeB.toString().length === 10 ? timeB * 1000 : timeB;
        return tsA - tsB;
      });

      if(!sortedShifts.length){
        shiftsList.innerHTML = '<div class="no-data">No shifts found.</div>';
        return;
      }

      shiftsList.innerHTML = '';
      sortedShifts.forEach((shift)=>{
        const shiftTime = shift.shift_time || shift.time;
        const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
        const {date, time} = formatShiftTime(new Date(timestamp));
        const isPast = timestamp < now;

        const card = document.createElement('div');
        card.className = 'shift-card';
        card.onclick = () => openShiftModal(shift);

        card.innerHTML = `
          <div class="shift-header">
            <div class="shift-left">
              <span class="shift-icon">üìÖ</span>
              <div class="shift-info">
                <div class="shift-datetime">${date} at ${time}</div>
                <div class="shift-host-preview">Host: ${shift.host || 'TBD'}</div>
              </div>
            </div>
            <span class="shift-arrow">${isPast ? '‚è™' : '‚Üí'}</span>
          </div>
          ${isPast ? '<div style="margin-top:8px;color:#888;font-weight:600;font-size:14px;">Past Shift</div>' : ''}
        `;
        shiftsList.appendChild(card);
      });

    } catch(err){
      console.error('Failed to load shifts:', err);
      shiftsList.innerHTML = '<div class="no-data">Failed to load shifts.</div>';
    }
  }

  loadShifts();
  setInterval(loadShifts, 60000);
});
</script>
</body>
</html>
