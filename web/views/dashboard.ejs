<script>
const input = document.getElementById('playerSearch');
const suggestionsBox = document.getElementById('suggestions');
const shiftsList = document.getElementById('shiftsList');
const topPlayersGrid = document.getElementById('topPlayersGrid');

// Pass in server-rendered topPlayers, fallback to empty array
let topPlayersData = <%- JSON.stringify(topPlayers || []) %>;

// ------------------- Tabs -------------------
document.querySelectorAll('.tab-button').forEach(btn => {
  btn.addEventListener('click', () => {
    document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
    btn.classList.add('active');
    const tab = document.getElementById(btn.dataset.tab);
    if(tab) tab.classList.add('active');
  });
});

// ------------------- Search -------------------
input.addEventListener('input', async () => {
  const q = input.value.trim();
  if (!q) { suggestionsBox.innerHTML = ''; return; }
  try {
    const res = await fetch(`/dashboard/search?username=${encodeURIComponent(q)}`);
    const players = await res.json();
    suggestionsBox.innerHTML = players.map(p => `
      <div class="suggestion-item" onclick="window.location='/dashboard/player/${p.username}'">
        <img src="https://www.roblox.com/headshot-thumbnail/image?userId=${p.roblox_id}&width=40&height=40&format=png"
             onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';"/>
        <span>${p.username}</span>
      </div>`).join('');
  } catch (err) { suggestionsBox.innerHTML = ''; console.error(err); }
});
document.addEventListener('click', e => {
  if (!input.contains(e.target) && !suggestionsBox.contains(e.target)) suggestionsBox.innerHTML = '';
});

// ------------------- Top Players -------------------
function calculateLiveMinutes(player){
  if(player.ongoing_session_start_time){
    const elapsed = Date.now() - new Date(player.ongoing_session_start_time).getTime();
    return elapsed > 0 ? elapsed / 1000 / 60 : 0;
  }
  return 0;
}

function getTotalMinutes(player){ return (player.weekly_minutes || 0) + calculateLiveMinutes(player); }

function formatMinutes(total){
  if(total < 1) return '0 min';
  const mins = Math.round(total), h = Math.floor(mins / 60), m = mins % 60;
  return h > 0 ? `${h} hr ${m} min` : `${m} min`;
}

function renderTopPlayers(){
  if(!topPlayersData.length){
    topPlayersGrid.innerHTML = '<div class="no-data">No active players data.</div>';
    return;
  }
  const livePlayers = topPlayersData
    .map(p => ({...p, live_total_minutes: getTotalMinutes(p), is_live: calculateLiveMinutes(p) > 0}))
    .sort((a,b) => b.live_total_minutes - a.live_total_minutes)
    .slice(0,3);

  topPlayersGrid.innerHTML = livePlayers.map(p => `
    <div class="player-card" onclick="window.location='/dashboard/player/${p.username}'">
      <img src="${p.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U'}"
           onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
      <div>${p.username}</div>
      ${p.is_live ? '<span class="live-status">LIVE</span>' : ''}
      <div class="time">${formatMinutes(p.live_total_minutes)}</div>
    </div>`).join('');
}
renderTopPlayers();
setInterval(renderTopPlayers, 5000);

// ------------------- Shifts -------------------
function formatShiftTime(ts){
  const d = new Date(ts * 1000);
  const now = new Date();
  const tomorrow = new Date(); tomorrow.setDate(tomorrow.getDate() + 1);
  let dateStr = d.toDateString() === now.toDateString() ? 'Today'
              : d.toDateString() === tomorrow.toDateString() ? 'Tomorrow'
              : d.toLocaleDateString(undefined,{weekday:'long',month:'long',day:'numeric'});
  const timeStr = d.toLocaleTimeString(undefined,{hour:'numeric',minute:'2-digit',hour12:true});
  return {date: dateStr, time: timeStr};
}

async function fetchAttendees(shiftId){
  try{
    const res = await fetch(`/shifts/attendees?shiftId=${shiftId}`);
    return res.ok ? await res.json() : [];
  }catch(e){ return []; }
}

async function renderAttendees(shiftId){
  const container = document.getElementById(`attendees-${shiftId}`);
  const addBox = document.getElementById(`add-attendee-${shiftId}`);
  if(!container || !addBox) return;
  container.innerHTML = '';

  const attendees = await fetchAttendees(shiftId);

  attendees.forEach(a => {
    const box = document.createElement('div');
    box.className = 'attendee-box';
    box.innerHTML = `<span>${a.username}</span><button data-username="${a.username}">√ó</button>`;
    const btn = box.querySelector('button');
    btn.addEventListener('click', async () => {
      await fetch('/shifts/remove-attendee', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({shiftId, username:a.username})
      });
      renderAttendees(shiftId);
    });
    container.appendChild(box);
  });

  addBox.onclick = async e => {
    e.stopPropagation();
    if(addBox.querySelector('select')) return;

    try{
      const res = await fetch('/shifts/players');
      const players = res.ok ? await res.json() : [];
      const select = document.createElement('select');
      select.style.width = '100%';
      select.style.padding = '8px';
      select.style.fontSize = '14px';
      select.style.border = '1px solid #42b4ff';
      select.style.borderRadius = '6px';
      select.innerHTML = '<option value="">Select player...</option>' + players.map(p => `<option value="${p.username}">${p.username}</option>`).join('');

      addBox.style.background = '#fff';
      addBox.style.border = '2px solid #42b4ff';
      addBox.innerHTML = '';
      addBox.appendChild(select);
      select.focus();

      select.onchange = async () => {
        if(select.value){
          await fetch('/shifts/add-attendee', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({shiftId, username: select.value})
          });
          await renderAttendees(shiftId);
        } else {
          addBox.style.background = '#e0e6f0';
          addBox.style.border = '1px dashed #42b4ff';
          addBox.innerHTML = '+ Add attendee';
        }
      };

      select.onblur = () => {
        setTimeout(() => {
          if(!select.value){
            addBox.style.background = '#e0e6f0';
            addBox.style.border = '1px dashed #42b4ff';
            addBox.innerHTML = '+ Add attendee';
          }
        }, 200);
      };
    }catch(err){ console.error(err); }
  };
}

async function loadShifts(){
  shiftsList.innerHTML = `<div class="no-data">Fetching data from Discord...</div>`;
  try{
    const res = await fetch('/sessions');
    if(!res.ok) throw new Error(`HTTP ${res.status}`);
    const sessions = await res.json();
    const now = Math.floor(Date.now() / 1000);
    const upcoming = sessions.filter(s => s.time && s.time > now).sort((a,b)=>a.time-b.time);

    if(!upcoming.length){
      shiftsList.innerHTML = '<div class="no-data">No upcoming shifts are currently scheduled.</div>';
      return;
    }

    shiftsList.innerHTML = '';
    upcoming.forEach((s, index) => {
      const shiftId = index; // temporary unique shiftId
      const {date, time} = formatShiftTime(s.time);
      const div = document.createElement('div');
      div.className = 'shift-item';

      let rolesHTML = `<div class="shift-role"><span class="role-label">üìã Host:</span><span class="role-name">${s.host || 'TBD'}</span></div>`;
      if(s.cohost) rolesHTML += `<div class="shift-role"><span class="role-label">ü§ù Co-Host:</span><span class="role-name">${s.cohost}</span></div>`;
      if(s.overseer) rolesHTML += `<div class="shift-role"><span class="role-label">üëÅÔ∏è Overseer:</span><span class="role-name">${s.overseer}</span></div>`;

      div.innerHTML = `
        <div class="shift-header">
          <span class="shift-icon">üìÖ</span>
          <span class="shift-datetime">${date} at ${time}</span>
        </div>
        <div class="shift-roles">${rolesHTML}</div>
        <div class="attendees-container" id="attendees-${shiftId}"></div>
        <div class="add-attendee-box" id="add-attendee-${shiftId}">+ Add attendee</div>
      `;
      shiftsList.appendChild(div);

      renderAttendees(shiftId).catch(console.error);
    });
  } catch(err){
    console.error('Failed to load shifts:', err);
    shiftsList.innerHTML = '<div class="no-data">Failed to load shifts.</div>';
  }
}

// Initial load
loadShifts();
</script>
</body>
</html>
