<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Mochi Bar Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      background: #f7f9fc;
      color: #000;
    }

    header {
      background: linear-gradient(90deg, #42b4ff, #b267f7);
      color: #fff;
      font-weight: 700;
      font-size: 42px;
      padding: 25px 40px;
      text-align: left;
      box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    }

    .container {
      max-width: 1200px;
      margin: 40px auto;
      padding: 0 20px;
      display: flex;
      flex-direction: column;
      gap: 50px;
    }

    h2 {
      font-size: 26px;
      font-weight: 700;
      margin-bottom: 25px;
      text-align: center;
      color: #333;
    }

    /* üîç Search Bar */
    .search-bar {
      display: flex;
      justify-content: center;
      margin-bottom: 25px;
    }

    .search-bar input {
      width: 100%;
      max-width: 400px;
      padding: 10px 15px;
      font-size: 16px;
      border: 2px solid #ccc;
      border-radius: 10px;
      outline: none;
      transition: border-color 0.2s;
    }
    .search-bar input:focus {
      border-color: #42b4ff;
    }

    /* üèÜ Leaderboard */
    .leaderboard {
      display: flex;
      justify-content: center;
      gap: 25px;
      flex-wrap: wrap;
    }

    .leaderboard-card {
      background: #fff;
      flex: 1;
      min-width: 250px;
      max-width: 300px;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 25px 20px;
      text-align: center;
      border-radius: 16px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .leaderboard-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 6px 15px rgba(0,0,0,0.15);
    }

    .leaderboard-rank {
      font-size: 22px;
      font-weight: 700;
      margin-bottom: 5px;
      padding: 5px 12px;
      border-radius: 12px;
      color: #fff;
    }
    .leaderboard-card:nth-child(1) .leaderboard-rank {
      background: #ffd700;
      color: #000;
    }
    .leaderboard-card:nth-child(2) .leaderboard-rank {
      background: #c0c0c0;
      color: #000;
    }
    .leaderboard-card:nth-child(3) .leaderboard-rank {
      background: #cd7f32;
      color: #fff;
    }

    .leaderboard-card img {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      margin-bottom: 10px;
      object-fit: cover;
    }

    .leaderboard-name {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 5px;
    }

    .leaderboard-minutes {
      font-size: 16px;
      color: #444;
    }

    .live-status {
      color: #28a745;
      font-weight: 700;
      font-size: 0.9em;
      margin-top: -3px;
      margin-bottom: 5px;
      text-transform: uppercase;
    }

    /* üìÖ Upcoming Shifts */
    .shifts-list {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .shift-item {
      background: #fff;
      padding: 15px 20px;
      border-radius: 10px;
      font-size: 16px;
      font-weight: 500;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      display: flex;
      flex-direction: column;
    }

    .shift-time {
      font-weight: 700;
      color: #42b4ff;
      margin-bottom: 5px;
    }

    .no-data {
      background: #f2f2f2;
      padding: 15px;
      text-align: center;
      border-radius: 10px;
      font-weight: 500;
      color: #555;
    }

    @media (max-width: 600px) {
      header {
        font-size: 32px;
        padding: 20px;
        text-align: center;
      }

      .leaderboard-card img {
        width: 80px;
        height: 80px;
      }
    }
  </style>
</head>
<body>

<header>Mochi Bar Dashboard</header>

<div class="container">

  <section>
    <h2>Top Active Players This Week</h2>

    <!-- üîç Search bar -->
    <div class="search-bar">
      <input type="text" id="playerSearch" placeholder="Search for a player...">
    </div>

    <div id="leaderboardContainer" class="leaderboard">
      <% if (!topPlayers || topPlayers.length === 0) { %>
        <div class="no-data" style="width:100%;">No leaderboard data available.</div>
      <% } %>
    </div>
  </section>

  <section>
    <h2>Upcoming Shifts (Discord)</h2>
    <div id="shiftsList" class="shifts-list">
      <div class="no-data">Loading upcoming shifts...</div>
    </div>
  </section>

</div>

<script>
  let topPlayersData = JSON.parse('<%- JSON.stringify(topPlayers || []) %>');
  const leaderboardContainer = document.getElementById('leaderboardContainer');
  const shiftsList = document.getElementById('shiftsList');
  const searchInput = document.getElementById('playerSearch');

  // üìä Calculate total live minutes = weekly + current (if live)
  function getTotalMinutes(player) {
    const weekly = player.weekly_minutes || 0;
    const current = player.current_minutes || 0;
    return weekly + current;
  }

  function formatMinutes(totalMinutes) {
    if (totalMinutes < 1) return '0 min';
    const totalMinutesInt = Math.round(totalMinutes);
    const h = Math.floor(totalMinutesInt / 60);
    const m = totalMinutesInt % 60;
    return h > 0 ? `${h} hr ${m} min` : `${m} min`;
  }

  function renderLeaderboard(filter = '') {
    if (topPlayersData.length === 0) {
      leaderboardContainer.innerHTML = `<div class="no-data" style="width:100%;">No leaderboard data available.</div>`;
      return;
    }

    let filteredPlayers = topPlayersData.filter(p =>
      p.username.toLowerCase().includes(filter.toLowerCase())
    );

    filteredPlayers.sort((a, b) => getTotalMinutes(b) - getTotalMinutes(a));

    const html = filteredPlayers.slice(0, 50).map((p, index) => {
      const total = getTotalMinutes(p);
      const isLive = (p.current_minutes && p.current_minutes > 0);
      const avatarUrl = `https://www.roblox.com/headshot-thumbnail/image?userId=${p.roblox_id}&width=100&height=100&format=png`;

      return `
        <div class="leaderboard-card" onclick="window.location='/dashboard/player/${p.username}'">
          <div class="leaderboard-rank">#${index + 1}</div>
          <img src="${avatarUrl}" alt="Avatar" onerror="this.onerror=null;this.src='https://placehold.co/100x100/d9d9d9/000?text=U'">
          <div class="leaderboard-name">${p.username}</div>
          ${isLive ? '<span class="live-status">LIVE</span>' : ''}
          <div class="leaderboard-minutes">${formatMinutes(total)}</div>
        </div>
      `;
    }).join('');

    leaderboardContainer.innerHTML = html;
  }

  searchInput.addEventListener('input', (e) => {
    renderLeaderboard(e.target.value);
  });

  renderLeaderboard();

  // üìÖ Shifts
  function formatShiftTime(timestamp) {
    const d = new Date(timestamp * 1000);
    const dateStr = d.toLocaleDateString(undefined, { weekday: 'short', month: 'short', day: 'numeric' });
    const timeStr = d.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', timeZoneName: 'short' });
    return `${dateStr} @ ${timeStr}`;
  }

  async function loadShifts() {
    shiftsList.innerHTML = `<div class="no-data">Fetching data from Discord...</div>`;
    try {
      const res = await fetch('/sessions');
      const sessions = await res.json();
      const now = Math.floor(Date.now() / 1000);
      const upcoming = sessions.filter(s => s.time > now).sort((a, b) => a.time - b.time);

      if (upcoming.length === 0) {
        shiftsList.innerHTML = `<div class="no-data">No upcoming shifts are currently scheduled.</div>`;
        return;
      }

      shiftsList.innerHTML = '';
      upcoming.forEach(session => {
        const div = document.createElement('div');
        div.className = 'shift-item';
        let hosts = `Host: ${session.host}`;
        if (session.cohost) hosts += ` | Co-Host: ${session.cohost}`;
        div.innerHTML = `
          <span class="shift-time">${formatShiftTime(session.time)}</span>
          ${hosts}
          ${session.overseer ? `<br>Overseer: ${session.overseer}` : ''}
        `;
        shiftsList.appendChild(div);
      });
    } catch (err) {
      console.error(err);
      shiftsList.innerHTML = `<div class="no-data" style="color:red;">Failed to load shifts.</div>`;
    }
  }

  loadShifts();
</script>

</body>
</html>
