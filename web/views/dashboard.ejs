<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Mochi Bar Dashboard</title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
<link rel="icon" type="image/png" href="https://i.ibb.co/S4NjLxNL/Gemini-Generated-Image-hbcyjkhbcyjkhbcy-removebg-preview.png">
<style>
  body { font-family: 'Roboto', sans-serif; margin:0; background:#f7f9fc; color:#000; }
  header {
    background: linear-gradient(90deg, #42b4ff, #1a85e6, #42b4ff, #1a85e6);
    background-size: 300% 100%;
    animation: gradientFlow 6s ease infinite;
    color:white; font-weight:700; font-size:48px; padding:25px 40px; text-align:center;
    box-shadow:0 2px 5px rgba(0,0,0,0.15);
  }
  @keyframes gradientFlow { 0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%} }
  .nav-tabs {
    background:white; display:flex; justify-content:space-between; align-items:center;
    gap:10px; padding:15px 20px; box-shadow:0 2px 5px rgba(0,0,0,0.05); border-bottom:2px solid #e0e6f0; flex-wrap:wrap;
  }
  .nav-buttons { display:flex; gap:10px; flex-wrap:wrap; }
  .tab-button { display:flex; align-items:center; gap:8px; padding:12px 24px; background:transparent; border:none; border-radius:8px; cursor:pointer; font-size:16px; font-weight:600; color:#555; transition:all 0.3s; }
  .tab-button:hover { background:#f0f8ff; color:#42b4ff; }
  .tab-button.active { background:#42b4ff; color:white; }
  .filter-button { display:flex; align-items:center; gap:8px; padding:10px 20px; background:white; border:2px solid #e0e6f0; border-radius:8px; cursor:pointer; font-size:14px; font-weight:600; color:#555; transition:all 0.3s; }
  .filter-button:hover { background:#f0f8ff; color:#42b4ff; border-color:#42b4ff; }
  .filter-button.active { background:#42b4ff; color:white; border-color:#42b4ff; }
  .tab-icon { font-size:20px; }
  .container { max-width:1200px; margin:40px auto; padding:0 20px; display:flex; flex-direction:column; gap:40px; }
  h2 { font-size:26px; font-weight:700; margin-bottom:20px; color:#333; }
  .content-section { background:#fff; padding:20px; border-radius:12px; box-shadow:0 6px 15px rgba(0,0,0,0.05); border:1px solid #ddd; }
  .search-wrapper { position:relative; max-width:300px; flex-grow:1; }
  .search-wrapper input { width:100%; padding:10px 15px; font-size:15px; border:1px solid #ccc; border-radius:8px; outline:none; box-sizing:border-box; transition:border 0.2s; }
  .search-wrapper input:focus { border-color:#42b4ff; }
  .suggestions { position:absolute; top:100%; left:0; width:100%; background:white; border:1px solid #ccc; max-height:250px; overflow-y:auto; z-index:10; border-radius:0 0 8px 8px; box-shadow:0 4px 10px rgba(0,0,0,0.1); }
  .suggestion-item { display:flex; align-items:center; padding:10px 12px; cursor:pointer; border-bottom:1px solid #eee; transition:background 0.2s; }
  .suggestion-item:last-child { border-bottom:none; }
  .suggestion-item:hover { background:#f0f8ff; }
  .suggestion-item img { width:40px; height:40px; border-radius:50%; margin-right:10px; }
  .no-data { text-align:center; color:#888; padding:20px; font-style:italic; }
  .top-players-grid { display:grid; grid-template-columns:repeat(auto-fit, minmax(200px,1fr)); gap:20px; justify-items:center; }
  .player-card { background:#f9f9f9; text-align:center; padding:15px; border-radius:12px; font-weight:600; cursor:pointer; border:1px solid #eee; transition:transform 0.2s, box-shadow 0.2s; width:100%; max-width:220px; }
  .player-card:hover { transform:translateY(-4px); box-shadow:0 8px 20px rgba(0,0,0,0.1); }
  .player-card img { width:80px; height:80px; border-radius:50%; margin-bottom:10px; object-fit:cover; background:#e0e6f0; }
  .player-card .avatar-wrapper { position:relative; display:inline-block; }
  .player-card .birthday-badge { position:absolute; bottom:0; right:0; background:white; width:30px; height:30px; border-radius:50%; display:flex; align-items:center; justify-content:center; font-size:18px; box-shadow:0 2px 6px rgba(0,0,0,0.2); }
  .player-card .time { font-size:0.9em; font-weight:500; color:#555; margin-top:4px; }
  .player-card .live-status { color:#28a745; font-weight:700; font-size:0.8em; display:block; margin-bottom:4px; }
  .player-table-wrapper { width:100%; overflow-x:auto; }
  .player-table { width:100%; border-collapse:collapse; min-width:600px; }
  .player-table th { background:linear-gradient(135deg,#42b4ff 0%,#1a85e6 100%); color:white; padding:12px; text-align:left; font-weight:600; text-transform:uppercase; font-size:13px; letter-spacing:0.5px; }
  .player-table td { padding:12px; border-bottom:1px solid #e0e6f0; }
  .player-table tr:hover { background:#f0f8ff; }
  .player-table .player-info { display:flex; align-items:center; gap:12px; }
  .player-table .player-avatar { width:40px; height:40px; border-radius:50%; object-fit:cover; }
  .player-table .player-name { font-weight:600; color:#333; }
  .player-table .player-rank { color:#666; font-size:13px; }
  .attendee-category { margin-bottom:20px; }
  .attendee-category-title { font-size:14px; font-weight:700; color:#1a85e6; margin-bottom:8px; text-transform:uppercase; letter-spacing:0.5px; }
  .shifts-list { display:flex; flex-direction:column; gap:16px; }
  .shift-card { background:linear-gradient(135deg,#f0f8ff 0%,#e6f3ff 100%); padding:18px 20px; border-radius:10px; border-left:4px solid #42b4ff; box-shadow:0 2px 8px rgba(0,0,0,0.05); cursor:pointer; transition:all 0.3s; }
  .shift-card:hover { transform:translateX(5px); box-shadow:0 4px 12px rgba(0,0,0,0.12); }
  .shift-header { display:flex; justify-content:space-between; align-items:center; }
  .shift-left { display:flex; align-items:center; gap:12px; flex:1; }
  .shift-icon { font-size:28px; }
  .shift-info { display:flex; flex-direction:column; gap:4px; }
  .shift-datetime { font-weight:700; font-size:18px; color:#1a85e6; }
  .shift-host-preview { font-size:14px; color:#555; }
  .shift-arrow { font-size:20px; color:#42b4ff; }
  .modal { display:none; position:fixed; z-index:1000; left:0; top:0; width:100%; height:100%; background-color:rgba(0,0,0,0.6); animation:fadeIn 0.3s; }
  @keyframes fadeIn { from{opacity:0} to{opacity:1} }
  .modal-content { background-color:white; margin:5% auto; padding:0; border-radius:12px; width:90%; max-width:600px; box-shadow:0 10px 40px rgba(0,0,0,0.3); animation:slideIn 0.3s; max-height:85vh; overflow-y:auto; }
  @keyframes slideIn { from{transform:translateY(-50px);opacity:0} to{transform:translateY(0);opacity:1} }
  .modal-header { display:flex; justify-content:space-between; align-items:center; padding:25px 30px; border-bottom:2px solid #42b4ff; background:linear-gradient(135deg,#f0f8ff 0%,#e6f3ff 100%); }
  .modal-title { font-size:24px; font-weight:700; color:#1a85e6; }
  .close { color:#aaa; font-size:32px; font-weight:bold; cursor:pointer; transition:color 0.2s; line-height:1; }
  .close:hover { color:#333; }
  .modal-body { padding:25px 30px; }
  .shift-roles-section { margin-bottom:25px; }
  .shift-roles-section h4 { font-size:16px; font-weight:700; color:#333; margin:0 0 12px 0; text-transform:uppercase; letter-spacing:0.5px; }
  .role-item { display:flex; align-items:center; gap:10px; padding:10px 14px; background:#f9f9f9; border-radius:8px; border:1px solid #e0e6f0; margin-bottom:8px; }
  .role-label { font-weight:600; color:#555; min-width:90px; }
  .role-name { color:#333; }
  .attendees-section h4 { font-size:16px; font-weight:700; color:#333; margin:0 0 12px 0; display:flex; align-items:center; gap:8px; text-transform:uppercase; letter-spacing:0.5px; }
  .attendee-count { background:#42b4ff; color:white; padding:2px 8px; border-radius:12px; font-size:12px; font-weight:700; }
  .attendees-container { display:flex; flex-direction:column; gap:8px; }
  .attendee-box { display:flex; justify-content:space-between; align-items:center; padding:10px 14px; border-radius:8px; background:#fff; border:1px solid #e0e6f0; transition:all 0.2s; }
  .attendee-box:hover { background:#f9f9f9; border-color:#42b4ff; }
  .attendee-box span { font-weight:500; color:#333; }
  .attendee-box button { background:#ff4444; border:none; border-radius:6px; color:white; font-weight:700; padding:4px 10px; cursor:pointer; transition:background 0.2s; }
  .attendee-box button:hover { background:#cc0000; }
  .add-attendee-box { display:flex; justify-content:center; align-items:center; padding:12px; border-radius:8px; background:#e6f3ff; cursor:pointer; font-weight:600; color:#1a85e6; border:2px dashed #42b4ff; transition:all 0.2s; margin-top:8px; }
  .add-attendee-box:hover { background:#d0e4ff; border-color:#1a85e6; }
  .settings-btn { display:flex; align-items:center; gap:12px; padding:15px 20px; background:white; border:2px solid #42b4ff; border-radius:10px; cursor:pointer; font-size:16px; font-weight:600; color:#1a85e6; transition:all 0.3s; text-align:left; }
  .settings-btn:hover { background:#42b4ff; color:white; transform:translateY(-2px); box-shadow:0 4px 12px rgba(66,180,255,0.3); }
  .settings-btn span:first-child { font-size:24px; }
  .tab-content { display:none; }
  .tab-content.active { display:block; }
  .settings-panel { display:none; background:#fff; padding:20px; border-radius:12px; box-shadow:0 6px 15px rgba(0,0,0,0.05); border:1px solid #ddd; margin-top:20px; }
  .settings-tabs { display:flex; gap:10px; margin-bottom:20px; border-bottom:2px solid #e0e6f0; }
  .settings-tab { padding:10px 20px; background:transparent; border:none; border-bottom:3px solid transparent; cursor:pointer; font-size:15px; font-weight:600; color:#555; transition:all 0.3s; }
  .settings-tab:hover { color:#42b4ff; }
  .settings-tab.active { color:#42b4ff; border-bottom-color:#42b4ff; }
  .settings-content { padding:20px 0; }
  .profile-link { color:#42b4ff; text-decoration:none; font-weight:600; }
  .profile-link:hover { text-decoration:underline; }
  .btn { padding:10px 20px; background:#42b4ff; color:white; border:none; border-radius:8px; cursor:pointer; font-weight:600; transition:all 0.3s; }
  .btn:hover { background:#1a85e6; transform:translateY(-2px); }
  .btn.small { padding:6px 12px; font-size:14px; }
  .announcement-box { background:#f0f8ff; border-left:4px solid #42b4ff; padding:15px; border-radius:8px; margin-bottom:15px; }
  .announcement-title { font-weight:700; font-size:18px; color:#1a85e6; margin-bottom:8px; }
  .announcement-content { margin-bottom:10px; }
  .announcement-meta { display:flex; justify-content:space-between; font-size:12px; color:#666; }
  .announcement-actions { display:flex; gap:10px; justify-content:flex-end; }
  .announcements-modal-list { max-height:400px; overflow-y:auto; margin:15px 0; }
  .announcement-item { border-bottom:1px solid #e0e6f0; padding:15px 0; }
  .announcement-item:last-child { border-bottom:none; }
  .announcement-form { display:flex; flex-direction:column; gap:15px; }
  .announcement-form input, .announcement-form textarea { width:100%; padding:10px; border:1px solid #ccc; border-radius:5px; }
  .announcement-form textarea { min-height:100px; resize:vertical; }
  .announcement-form-actions { display:flex; justify-content:flex-end; gap:10px; }
  @media(max-width:600px){
    header { font-size:36px; padding:20px; }
    h2 { text-align:center; }
    .top-players-grid { grid-template-columns:1fr; }
    .nav-tabs { flex-direction:column; gap:10px; }
    .nav-buttons { width:100%; justify-content:center; flex-wrap:wrap; }
    .search-wrapper { width:100%; max-width:100%; }
    .tab-button { padding:10px 16px; font-size:14px; }
    .shift-card { padding:15px; }
    .shift-header { flex-direction:row; align-items:center; gap:10px; }
    .shift-left { flex-wrap:nowrap; }
    .shift-info { flex:1; }
    .shift-datetime { font-size:16px; }
    .shift-host-preview { font-size:13px; }
    .modal-content { margin:5% auto; width:95%; }
    .modal-header, .modal-body { padding:20px; }
    .player-table-wrapper { overflow-x:auto; -webkit-overflow-scrolling:touch; }
    .player-table { font-size:12px; min-width:100%; table-layout:fixed; }
    .player-table th, .player-table td { padding:10px 8px; word-break:break-word; }
    .player-table .player-avatar { width:32px; height:32px; }
    .player-table .player-info { gap:8px; flex-wrap:wrap; }
    .filter-button { padding:8px 12px; font-size:12px; margin-bottom:5px; }
    .player-table th:nth-child(3), .player-table td:nth-child(3),
    .player-table th:nth-child(5), .player-table td:nth-child(5) { display:none; }
  }
</style>
</head>
<body>
<header>Mochi Bar Dashboard</header>
<nav class="nav-tabs">
  <div class="nav-buttons">
    <button class="tab-button active" data-tab="home"><span class="tab-icon">🏠</span>Home</button>
    <button class="tab-button" data-tab="playerlist"><span class="tab-icon">👥</span>Player List</button>
    <button class="tab-button" data-tab="shifts"><span class="tab-icon">📅</span>Shifts</button>
    <button class="tab-button" data-tab="myaccount"><span class="tab-icon">👤</span>My Account</button>
    <button class="tab-button" data-tab="settings"><span class="tab-icon">⚙️</span>Settings</button>
  </div>
  <div class="search-wrapper">
    <input type="text" id="playerSearch" placeholder="Search Roblox username...">
    <div id="suggestions" class="suggestions"></div>
  </div>
</nav>
<div class="container">
  <div id="home" class="tab-content active">
    <section class="content-section">
      <h2>Announcements</h2>
      <div id="announcementsContainer">
        <div id="latestAnnouncement" class="announcement-box"></div>
        <div class="announcement-actions">
          <button id="viewAllAnnouncementsBtn" class="btn">View All</button>
          <button id="newAnnouncementBtn" class="btn" style="display:none;">New Announcement</button>
        </div>
      </div>
    </section>
    <section class="content-section"><h2>Top Active This Week</h2><div id="topPlayersGrid" class="top-players-grid"></div></section>
    <section class="content-section"><h2>Top 3 Shift Leaders</h2><div id="topShiftLeaders" class="top-players-grid"></div></section>
    <section class="content-section"><h2>Upcoming Birthdays</h2><div id="upcomingBirthdays" class="top-players-grid"></div></section>
  </div>
  <div id="playerlist" class="tab-content">
    <section class="content-section">
      <h2>Player List</h2>
      <div style="display:flex;gap:10px;flex-wrap:wrap;margin-bottom:20px;">
        <button class="filter-button active" data-filter="all" onclick="filterPlayerList('all')">All Players</button>
        <button class="filter-button" data-filter="Management" onclick="filterPlayerList('Management')">Management</button>
        <button class="filter-button" data-filter="Public Relations" onclick="filterPlayerList('Public Relations')">Public Relations</button>
        <button class="filter-button" data-filter="Operations" onclick="filterPlayerList('Operations')">Operations</button>
        <button class="filter-button" data-filter="Human Resources" onclick="filterPlayerList('Human Resources')">Human Resources</button>
      </div>
      <div class="player-table-wrapper">
        <table class="player-table">
          <thead>
            <tr>
              <th>Player</th>
              <th>Rank</th>
              <th>Weekly Minutes</th>
              <th id="requirementHeader" style="display:none;">Requirements Met</th>
              <th>Roblox ID</th>
            </tr>
          </thead>
          <tbody id="fullPlayerList"></tbody>
        </table>
      </div>
    </section>
  </div>
  <div id="shifts" class="tab-content">
    <section class="content-section"><h2>Weekly Shifts</h2><div id="shiftsList" class="shifts-list"></div></section>
  </div>
  <div id="myaccount" class="tab-content">
    <section class="content-section"><h2>My Account</h2><div id="accountInfo"></div><div id="settingsPanel" class="settings-panel"></div></section>
  </div>
<div id="settings" class="tab-content">
    <section class="content-section"><h2>Settings</h2><div style="display:flex; flex-direction:column; gap:15px; max-width:400px;">
      <button class="settings-btn" onclick="openAddPlayer()"><span>➕</span><span>Add Player</span></button>
      <button class="settings-btn" onclick="openLabelsManager()"><span>🏷️</span><span>Manage Player Labels</span></button>
      <button class="settings-btn" onclick="openBirthdaysManager()"><span>🎂</span><span>Manage Birthdays</span></button>
      <button class="settings-btn" onclick="openWeeklyResetStatus()"><span>📊</span><span>Check Weekly Reset Status</span></button>
      <button class="settings-btn" onclick="openLastWeekHistory()"><span>📅</span><span>View Last Week's Data</span></button>
    </div></section>
  </div>
<div id="shiftModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span class="modal-title" id="modalShiftTitle"></span>
      <span class="close" onclick="closeShiftModal()">&times;</span>
    </div>
    <div class="modal-body">
      <div class="shift-roles-section"><h4>Shift Roles</h4><div id="modalRoles"></div></div>
      <div class="attendees-section">
        <h4>Attendees <span class="attendee-count" id="modalAttendeeCount">0</span></h4>
        <div class="attendees-container" id="modalAttendees"></div>
        <div class="add-attendee-box" id="modalAddAttendee">+ Add attendee</div>
      </div>
    </div>
  </div>
</div>

<div id="announcementsModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span class="modal-title">Announcements</span>
      <span class="close" onclick="closeAnnouncementsModal()">&times;</span>
    </div>
    <div class="modal-body">
      <div id="announcementsModalList" class="announcements-modal-list"></div>
    </div>
  </div>
</div>

<div id="newAnnouncementModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span class="modal-title">New Announcement</span>
      <span class="close" onclick="closeNewAnnouncementModal()">&times;</span>
    </div>
    <div class="modal-body">
      <form id="announcementForm" class="announcement-form">
        <input type="text" id="announcementTitle" placeholder="Announcement Title" required>
        <textarea id="announcementContent" placeholder="Announcement Content" required></textarea>
        <div class="announcement-form-actions">
          <button type="button" class="btn" onclick="closeNewAnnouncementModal()">Cancel</button>
          <button type="submit" class="btn">Post Announcement</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('playerSearch');
  const suggestionsBox = document.getElementById('suggestions');
  const shiftsList = document.getElementById('shiftsList');
  const topPlayersGrid = document.getElementById('topPlayersGrid');
  const fullPlayerList = document.getElementById('fullPlayerList');
  const shiftModal = document.getElementById('shiftModal');
  const accountInfo = document.getElementById('accountInfo');
  const settingsPanel = document.getElementById('settingsPanel');
  const latestAnnouncement = document.getElementById('latestAnnouncement');
  const newAnnouncementBtn = document.getElementById('newAnnouncementBtn');
  const viewAllAnnouncementsBtn = document.getElementById('viewAllAnnouncementsBtn');
  
  // Add event listeners for announcement buttons
  viewAllAnnouncementsBtn.addEventListener('click', openAnnouncementsModal);
  newAnnouncementBtn.addEventListener('click', openNewAnnouncementModal);
  document.getElementById('announcementForm').addEventListener('submit', submitNewAnnouncement);

  let currentShiftId = null;
  let currentUser = null;
  let userGroupRank = '';
  let currentPlayerFilter = 'all';
  let allPlayersData = [];
  let playerShiftStats = {};
  let announcements = [];

  const LEADERSHIP_RANKS = [
    'Chairman', 'Vice Chairman', 'Chief Administrative Officer', 'Developer',
    'Chief of Operations', 'Chief of Human Resources', 'Chief Of Public Relations'
  ];
  const EXECUTIVE_RANKS = ['Chairman', 'Vice Chairman'];
  const DIRECTOR_PLUS = [
    'Chairman', 'Vice Chairman', 'Chief Administrative Officer', 'Developer',
    'Chief of Operations', 'Chief of Human Resources', 'Chief Of Public Relations',
    'Head Corporate', 'Senior Corporate', 'Junior Corporate', 'Corporate Intern',
    'Lead Mochi Director', 'Senior Mochi Director', 'Mochi Director'
  ];

  async function loadCurrentUser() {
    try {
      const res = await fetch('/dashboard/current-user');
      if (res.ok) {
        currentUser = await res.json();
        userGroupRank = currentUser.group_rank || '';
        console.log('Current user loaded:', currentUser.username, 'Rank:', userGroupRank);
        updateTabAccess();
        renderMyAccount();
        
        // Show new announcement button if user is in leadership ranks
        if (LEADERSHIP_RANKS.includes(userGroupRank)) {
          newAnnouncementBtn.style.display = 'block';
        }
        
        // Load announcements
        loadAnnouncements();
      }
    } catch (err) {
      console.error('Failed to load current user:', err);
      userGroupRank = '';
    }
  }
  
  async function loadAnnouncements() {
    try {
      const response = await fetch('/dashboard/announcements');
      announcements = await response.json();
      
      renderLatestAnnouncement();
    } catch (err) {
      console.error('Failed to load announcements:', err);
    }
  }
  
  function renderLatestAnnouncement() {
    if (announcements.length === 0) {
      latestAnnouncement.innerHTML = '<p>No announcements available.</p>';
      return;
    }
    
    const latest = announcements[0];
    const date = new Date(latest.date);
    
    latestAnnouncement.innerHTML = `
      <div class="announcement-title">${latest.title}</div>
      <div class="announcement-content">${latest.content}</div>
      <div class="announcement-meta">
        <span>By: ${latest.author}</span>
        <span>${date.toLocaleDateString()}</span>
      </div>
    `;
  }
  
  function openAnnouncementsModal() {
    const modal = document.getElementById('announcementsModal');
    const modalList = document.getElementById('announcementsModalList');
    
    modalList.innerHTML = '';
    
    if (announcements.length === 0) {
      modalList.innerHTML = '<p>No announcements available.</p>';
    } else {
      announcements.forEach(announcement => {
        const date = new Date(announcement.date);
        const item = document.createElement('div');
        item.className = 'announcement-item';
        item.innerHTML = `
          <div class="announcement-title">${announcement.title}</div>
          <div class="announcement-content">${announcement.content}</div>
          <div class="announcement-meta">
            <span>By: ${announcement.author}</span>
            <span>${date.toLocaleDateString()}</span>
          </div>
        `;
        modalList.appendChild(item);
      });
    }
    
    modal.style.display = 'block';
  }
  
  function closeAnnouncementsModal() {
    document.getElementById('announcementsModal').style.display = 'none';
  }
  
  // Make closeAnnouncementsModal and closeNewAnnouncementModal globally accessible
  window.closeAnnouncementsModal = closeAnnouncementsModal;
  window.closeNewAnnouncementModal = closeNewAnnouncementModal;
  
  // Add event listener for clicking outside the modal to close it
  window.addEventListener('click', function(e) {
    const announcementsModal = document.getElementById('announcementsModal');
    const newAnnouncementModal = document.getElementById('newAnnouncementModal');
    
    if (e.target === announcementsModal) {
      closeAnnouncementsModal();
    }
    
    if (e.target === newAnnouncementModal) {
      closeNewAnnouncementModal();
    }
  });
  
  function openNewAnnouncementModal() {
    document.getElementById('newAnnouncementModal').style.display = 'block';
  }
  
  function closeNewAnnouncementModal() {
    document.getElementById('newAnnouncementModal').style.display = 'none';
  }
  
  async function submitNewAnnouncement(event) {
    event.preventDefault();
    
    const title = document.getElementById('announcementTitle').value;
    const content = document.getElementById('announcementContent').value;
    
    if (!title || !content) return;
    
    try {
      // Save to Supabase via API
      const response = await fetch('/dashboard/announcements', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title,
          content,
          author: currentUser.username
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to save announcement');
      }
      
      const newAnnouncement = await response.json();
      
      // Add to the beginning of the array
      announcements.unshift(newAnnouncement);
      
      // Update the UI
      renderLatestAnnouncement();
      
      // Close the modal and reset form
      closeNewAnnouncementModal();
      document.getElementById('announcementForm').reset();
    } catch (error) {
      console.error('Error saving announcement:', error);
      alert('Failed to save announcement. Please try again.');
    }
  }

  function renderMyAccount() {
    if (currentUser) {
      accountInfo.innerHTML = `
        <p><strong>Username:</strong> ${currentUser.username}</p>
        <p><a href="/dashboard/player/${currentUser.username}" class="profile-link">View Profile</a></p>
        <button id="userSettingsBtn" class="btn">User Settings</button>
      `;

      const userSettingsBtn = document.getElementById('userSettingsBtn');
      if (userSettingsBtn) {
        userSettingsBtn.addEventListener('click', toggleUserSettingsPanel);
      }
    } else {
      accountInfo.innerHTML = '<p>Please log in to view your account.</p>';
    }
  }

  function toggleUserSettingsPanel() {
    if (settingsPanel.style.display === 'none' || settingsPanel.style.display === '') {
      renderSettingsPanel();
      settingsPanel.style.display = 'block';
    } else {
      settingsPanel.style.display = 'none';
    }
  }

  function renderSettingsPanel() {
    settingsPanel.innerHTML = `
      <div class="settings-tabs">
        <button class="settings-tab active" data-tab="account">Account Details</button>
        <button class="settings-tab" data-tab="security">Security</button>
      </div>
      <div class="settings-content" id="settingsContent"></div>
    `;

    const tabs = settingsPanel.querySelectorAll('.settings-tab');
    const content = document.getElementById('settingsContent');

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        const selected = tab.dataset.tab;
        if (selected === 'account') renderAccountDetails(content);
        if (selected === 'security') renderSecurity(content);
      });
    });

    renderAccountDetails(content);
  }

  function renderAccountDetails(container) {
    if (!currentUser) {
      container.innerHTML = '<p>No user data available.</p>';
      return;
    }

    const hasPassword = currentUser.password && currentUser.password.length > 0;

    container.innerHTML = `
      <p><strong>Roblox Username:</strong> ${currentUser.username}</p>
      ${hasPassword ? `
        <p><strong>Password:</strong> 
          <span id="passwordField" style="font-family:monospace;">${maskPassword(currentUser.password)}</span>
        </p>
        <button id="revealPasswordBtn" class="btn small" style="user-select:none;">Hold to Reveal</button>
      ` : '<p><strong>Password:</strong> Not set</p>'}
    `;

    if (!hasPassword) return;

    const passwordField = document.getElementById('passwordField');
    const revealBtn = document.getElementById('revealPasswordBtn');

    if (!passwordField || !revealBtn) return;

    const showPassword = () => {
      passwordField.textContent = currentUser.password || '';
      revealBtn.style.background = '#1a85e6';
    };
    
    const hidePassword = () => {
      passwordField.textContent = maskPassword(currentUser.password);
      revealBtn.style.background = '#42b4ff';
    };

    revealBtn.addEventListener('mousedown', (e) => {
      e.preventDefault();
      showPassword();
    });
    
    revealBtn.addEventListener('mouseup', hidePassword);
    revealBtn.addEventListener('mouseleave', hidePassword);

    revealBtn.addEventListener('touchstart', (e) => {
      e.preventDefault();
      showPassword();
    });
    
    revealBtn.addEventListener('touchend', (e) => {
      e.preventDefault();
      hidePassword();
    });
    
    revealBtn.addEventListener('touchcancel', hidePassword);
  }

  function maskPassword(pwd) {
    if (!pwd) return '';
    return '•'.repeat(pwd.length);
  }

  function renderSecurity(container) {
    container.innerHTML = `<p>⚠️ Security options coming soon.</p>`;
  }

  function updateTabAccess() {
    const playerlistTab = document.querySelector('[data-tab="playerlist"]');
    const settingsTab = document.querySelector('[data-tab="settings"]');

    if (!LEADERSHIP_RANKS.includes(userGroupRank)) {
      playerlistTab.style.opacity = '0.5';
      playerlistTab.style.cursor = 'not-allowed';
      playerlistTab.title = 'Requires Mochi Director+';
      playerlistTab.dataset.disabled = 'true';
    } else {
      playerlistTab.style.opacity = '1';
      playerlistTab.style.cursor = 'pointer';
      playerlistTab.title = '';
      playerlistTab.dataset.disabled = 'false';
      
      // Preload player list data when user has access
      setTimeout(() => {
        if (!allPlayersData.length) {
          loadPlayerList();
        }
      }, 1000);
    }

    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      settingsTab.style.opacity = '0.5';
      settingsTab.style.cursor = 'not-allowed';
      settingsTab.title = 'Requires Vice Chairman+';
      settingsTab.dataset.disabled = 'true';
    } else {
      settingsTab.style.opacity = '1';
      settingsTab.style.cursor = 'pointer';
      settingsTab.title = '';
      settingsTab.dataset.disabled = 'false';
    }
  }

  document.querySelectorAll('.tab-button').forEach(btn => {
    btn.addEventListener('click', (e) => {
      if (btn.dataset.disabled === 'true') {
        e.preventDefault();
        return;
      }

      const tab = btn.dataset.tab;

      if (tab === 'playerlist' && !DIRECTOR_PLUS.includes(userGroupRank)) {
        alert('Access Denied: Player List requires Mochi Director+');
        return;
      }

      if (tab === 'settings' && !EXECUTIVE_RANKS.includes(userGroupRank)) {
        alert('Access Denied: Settings requires Vice Chairman+');
        return;
      }

      document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
      btn.classList.add('active');
      document.getElementById(tab).classList.add('active');
    });
  });

  loadCurrentUser();

  input.addEventListener('input', async () => {
    const q = input.value.trim();
    if (!q) { suggestionsBox.innerHTML = ''; return; }
    try {
      const res = await fetch(`/dashboard/search?username=${encodeURIComponent(q)}`);
      const players = res.ok ? await res.json() : [];
      suggestionsBox.innerHTML = players.map(p => `
        <div class="suggestion-item" onclick="window.location='/dashboard/player/${p.username}'">
          <img src="https://www.roblox.com/headshot-thumbnail/image?userId=${p.roblox_id}&width=40&height=40&format=png"
               onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';"/>
          <span>${p.username}</span>
        </div>`).join('');
    } catch (err) { suggestionsBox.innerHTML = ''; console.error(err); }
  });
  
  document.addEventListener('click', e => {
    if (!input.contains(e.target) && !suggestionsBox.contains(e.target)) suggestionsBox.innerHTML = '';
  });

  let topPlayersData = [];

  function calculateLiveMinutes(player){
    if(player.ongoing_session_start_time){
      const elapsed = Date.now() - new Date(player.ongoing_session_start_time).getTime();
      return elapsed > 0 ? elapsed / 1000 / 60 : 0;
    }
    return 0;
  }

  function getTotalMinutes(player){ return (player.weekly_minutes || 0
) + calculateLiveMinutes(player); }

  function formatMinutes(total){
    if(total < 1) return '0 min';
    const mins = Math.round(total), h = Math.floor(mins / 60), m = mins % 60;
    return h > 0 ? `${h} hr ${m} min` : `${m} min`;
  }

  async function renderTopPlayers(){
    try{
      const res = await fetch('/dashboard/top-players');
      topPlayersData = res.ok ? await res.json() : topPlayersData;
      if(!topPlayersData.length){
        topPlayersGrid.innerHTML = '<div class="no-data">No active players data.</div>';
        return;
      }
      const livePlayers = topPlayersData
        .map(p => ({...p, live_total_minutes: getTotalMinutes(p), is_live: calculateLiveMinutes(p) > 0}))
        .sort((a,b) => b.live_total_minutes - a.live_total_minutes)
        .slice(0,3);

      topPlayersGrid.innerHTML = livePlayers.map(p => `
        <div class="player-card" onclick="window.location='/dashboard/player/${p.username}'">
          <img src="${p.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U'}"
               onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
          <div>${p.username}</div>
          ${p.is_live ? '<span class="live-status">LIVE</span>' : ''}
          <div class="time">${formatMinutes(p.live_total_minutes)}</div>
        </div>`).join('');
    } catch(err){ console.error(err); }
  }
  renderTopPlayers();
  setInterval(renderTopPlayers, 5000);

// Simple Levenshtein distance function
function getLevenshteinDistance(a, b) {
  const matrix = Array.from({ length: a.length + 1 }, () => []);
  for (let i = 0; i <= a.length; i++) matrix[i][0] = i;
  for (let j = 0; j <= b.length; j++) matrix[0][j] = j;

  for (let i = 1; i <= a.length; i++) {
    for (let j = 1; j <= b.length; j++) {
      const cost = a[i-1] === b[j-1] ? 0 : 1;
      matrix[i][j] = Math.min(
        matrix[i-1][j] + 1,
        matrix[i][j-1] + 1,
        matrix[i-1][j-1] + cost
      );
    }
  }
  return matrix[a.length][b.length];
}

// Find closest username from a list
function findClosestUsername(target, usernames) {
  target = target.toLowerCase();
  let closest = target;
  let minDistance = Infinity;

  usernames.forEach(name => {
    const distance = getLevenshteinDistance(target, name.toLowerCase());
    if (distance < minDistance) {
      minDistance = distance;
      closest = name;
    }
  });

  return closest;
}

async function renderTopShiftLeaders(){
  try{
    const shiftsRes = await fetch('/shifts');
    const shifts = shiftsRes.ok ? await shiftsRes.json() : [];

    const attendeesPromises = shifts.map(async shift => {
      try {
        const res = await fetch(`/shifts/attendees?shiftId=${shift.id}`);
        return res.ok ? await res.json() : [];
      } catch { return []; }
    });

    const allAttendeesArrays = await Promise.all(attendeesPromises);

    const playersRes = await fetch('/dashboard/players');
    const allPlayers = playersRes.ok ? await playersRes.json() : [];
    const allUsernames = allPlayers.map(p => p.username);

    const participationCount = {};

    shifts.forEach((shift, index) => {
      const attendees = allAttendeesArrays[index];

      ['host', 'cohost', 'overseer'].forEach(role => {
        if (shift[role] && shift[role] !== 'TBD') {
          const closest = findClosestUsername(shift[role], allUsernames).toLowerCase();
          participationCount[closest] = (participationCount[closest] || 0) + 1;
        }
      });

      attendees.forEach(attendee => {
        const closest = findClosestUsername(attendee.username, allUsernames).toLowerCase();
        participationCount[closest] = (participationCount[closest] || 0) + 1;
      });
    });

    const sortedLeaders = Object.entries(participationCount)
      .map(([username, count]) => ({ username, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 3);

    const topShiftLeadersGrid = document.getElementById('topShiftLeaders');

    if(!sortedLeaders.length){
      topShiftLeadersGrid.innerHTML = '<div class="no-data">No shift participation data.</div>';
      return;
    }

    topShiftLeadersGrid.innerHTML = sortedLeaders.map(leader => {
      const player = allPlayers.find(p => p.username.toLowerCase() === leader.username);
      const avatarUrl = player?.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';
      const displayName = player?.username || leader.username;

      return `
        <div class="player-card" onclick="window.location='/dashboard/player/${displayName}'">
          <img src="${avatarUrl}" onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
          <div>${displayName}</div>
          <div class="time">${leader.count} shift${leader.count !== 1 ? 's' : ''}</div>
        </div>`;
    }).join('');

  } catch(err){ 
    console.error('Error loading shift leaders:', err); 
    document.getElementById('topShiftLeaders').innerHTML = '<div class="no-data">Failed to load shift leaders.</div>';
  }
}

renderTopShiftLeaders();
setInterval(renderTopShiftLeaders, 60000);

async function renderRequirementsBox() {
  try {
    const playersRes = await fetch('/dashboard/players');
    const allPlayers = playersRes.ok ? await playersRes.json() : [];

    // Define teams
    const TEAMS = {
      corporate: [
        'Corporate Intern',
        'Junior Corporate',
        'Senior Corporate',
        'Head Corporate'
      ],
      management: [
        'Lead Mochi Director',
        'Senior Mochi Director',
        'Mochi Director'
      ],
      supervision: [
        'Mochi Manager',
        'Assistant Mochi Manager',
        'Supervisor',
        'Mochi Leader'
      ]
    };

    const tags = {
      corporate: [],
      management: [],
      supervision: []
    };

    // Assign players to tags
    allPlayers.forEach(player => {
      const rank = player.group_rank;

      if (TEAMS.corporate.includes(rank)) {
        tags.corporate.push({ username: player.username, rank });
      } else if (TEAMS.management.includes(rank)) {
        tags.management.push(player.username);
      } else if (TEAMS.supervision.includes(rank)) {
        tags.supervision.push(player.username);
      } else {
        // Players not in any team can go to supervision by default
        tags.supervision.push(player.username);
      }
    });

    // Order corporate by department tags (rank order defined in TEAMS.corporate)
    tags.corporate.sort((a, b) => {
      return TEAMS.corporate.indexOf(a.rank) - TEAMS.corporate.indexOf(b.rank);
    });

    // Build HTML
    const requirementsBox = document.getElementById('requirementsBox');
    requirementsBox.innerHTML = `
      <div class="requirements-section">
        <h3>Corporate Requirements</h3>
        <p>Players must have the following department tags:</p>
        <ul>${tags.corporate.map(u => `<li>${u.username} (${u.rank})</li>`).join('')}</ul>
      </div>

      <div class="requirements-section">
        <h3>Management Requirements</h3>
        <p>Players must meet the tag requirements for management:</p>
        <ul>${tags.management.map(u => `<li>${u}</li>`).join('')}</ul>
      </div>

      <div class="requirements-section">
        <h3>Recommended (Supervision)</h3>
        <p>Players below Mochi Manager: 90 minutes/week recommended</p>
        <ul>${tags.supervision.map(u => `<li>${u}</li>`).join('')}</ul>
      </div>
    `;
  } catch (err) {
    console.error('Error rendering requirements box:', err);
    document.getElementById('requirementsBox').innerHTML = '<div class="no-data">Failed to load requirements.</div>';
  }
}

renderRequirementsBox();

async function calculateShiftStats() {
  try {
    const shiftsRes = await fetch('/shifts');
    const shifts = shiftsRes.ok ? await shiftsRes.json() : [];
    
    const now = Date.now();
    const weekStart = new Date(now);
    weekStart.setHours(0, 0, 0, 0);
    weekStart.setDate(weekStart.getDate() - ((weekStart.getDay() + 6) % 7));
    
    const stats = {};
    
    for (const shift of shifts) {
      const shiftTime = shift.shift_time || shift.time;
      const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
      
      if (timestamp < weekStart.getTime()) continue;
      
      if (shift.host && shift.host !== 'TBD') {
        const hostLower = shift.host.toLowerCase();
        if (!stats[hostLower]) stats[hostLower] = { hosted: 0, attended: 0 };
        stats[hostLower].hosted++;
      }
      
      if (shift.cohost) {
        const cohostLower = shift.cohost.toLowerCase();
        if (!stats[cohostLower]) stats[cohostLower] = { hosted: 0, attended: 0 };
        stats[cohostLower].hosted++;
      }
      
      const attendeesRes = await fetch(`/shifts/attendees?shiftId=${shift.id}`);
      if (attendeesRes.ok) {
        const attendees = await attendeesRes.json();
        attendees.forEach(a => {
          const usernameLower = a.username.toLowerCase();
          if (!stats[usernameLower]) stats[usernameLower] = { hosted: 0, attended: 0 };
          stats[usernameLower].attended++;
        });
      }
    }
    
    return stats;
  } catch(err) {
    console.error('Error calculating shift stats:', err);
    return {};
  }
}

  async function filterPlayerList(filter) {
    currentPlayerFilter = filter;
    
    document.querySelectorAll('[data-filter]').forEach(btn => {
      if (btn.dataset.filter === filter) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
    
    const requirementHeader = document.getElementById('requirementHeader');
    if (filter === 'all') {
      requirementHeader.style.display = 'none';
    } else {
      requirementHeader.style.display = '';
    }
    
    await renderFullPlayers();
  }

  window.filterPlayerList = filterPlayerList;

  async function renderFullPlayers(){
    try {
      const res = await fetch('/dashboard/players');
      const players = res.ok ? await res.json() : [];
      allPlayersData = players;
      
      playerShiftStats = await calculateShiftStats();
      
      let playersWithLabels = players;
      
      if (currentPlayerFilter !== 'all') {
        const labelsPromises = players.map(async p => {
          try {
            const labelRes = await fetch(`/settings/labels/${p.roblox_id}`);
            const labels = labelRes.ok ? await labelRes.json() : [];
            return { ...p, labels };
          } catch {
            return { ...p, labels: [] };
          }
        });
        
        playersWithLabels = await Promise.all(labelsPromises);
        playersWithLabels = playersWithLabels.filter(p => p.labels.includes(currentPlayerFilter));
      }
      
      if(!playersWithLabels.length){
        const colspan = currentPlayerFilter === 'all' ? 4 : 5;
        fullPlayerList.innerHTML = `<tr><td colspan="${colspan}" class="no-data">No players found.</td></tr>`;
        return;
      }
      
      fullPlayerList.innerHTML = playersWithLabels.map(p => {
        const hours = Math.floor((p.weekly_minutes || 0) / 60);
        const mins = (p.weekly_minutes || 0) % 60;
        
        let requirementCell = '';
        if (currentPlayerFilter !== 'all') {
          const stats = playerShiftStats[p.username.toLowerCase()] || { hosted: 0, attended: 0 };
          
          let requirementMet = false;
          let requirementText = '';
          
          if (currentPlayerFilter === 'Human Resources' || currentPlayerFilter === 'Operations') {
            requirementMet = stats.hosted >= 2;
            requirementText = `${stats.hosted}/2 shifts hosted`;
          } else if (currentPlayerFilter === 'Public Relations' || currentPlayerFilter === 'Management') {
            requirementMet = stats.attended >= 2;
            requirementText = `${stats.attended}/2 shifts attended`;
          }
          
          const color = requirementMet ? '#28a745' : '#ff4444';
          const icon = requirementMet ? '✓' : '✗';
          requirementCell = `<td><span style="color:${color};font-weight:700;">${icon} ${requirementText}</span></td>`;
        }
        
        return `
          <tr style="cursor:pointer;" onclick="window.location='/dashboard/player/${p.username}'">
            <td>
              <div class="player-info">
                <img class="player-avatar" src="${p.avatar_url || 'https://placehold.co/40x40/e0e6f0/5f6c7b?text=U'}"
                     onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';"/>
                <div>
                  <div class="player-name">${p.username}</div>
                </div>
              </div>
            </td>
            <td><span class="player-rank">${p.group_rank || 'Unknown'}</span></td>
            <td>${hours}h ${mins}m</td>
            ${requirementCell}
            <td>${p.roblox_id}</td>
          </tr>`;
      }).join('');
    } catch(err){ 
      console.error(err); 
      const colspan = currentPlayerFilter === 'all' ? 4 : 5;
      fullPlayerList.innerHTML = `<tr><td colspan="${colspan}" class="no-data">Failed to load players.</td></tr>`; 
    }
  }
  renderFullPlayers();

  function formatShiftTime(ts){
    const d = new Date(ts);
    const now = new Date();
    const tomorrow = new Date(); tomorrow.setDate(tomorrow.getDate() + 1);
    let dateStr = d.toDateString() === now.toDateString() ? 'Today'
                : d.toDateString() === tomorrow.toDateString() ? 'Tomorrow'
                : d.toLocaleDateString(undefined,{weekday:'long',month:'long',day:'numeric'});
    const timeStr = d.toLocaleTimeString(undefined,{hour:'numeric',minute:'2-digit',hour12:true});
    return {date: dateStr, time: timeStr};
  }

  async function openShiftModal(shift) {
    currentShiftId = shift.id;
    const shiftTime = shift.shift_time || shift.time;
    const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
    const {date, time} = formatShiftTime(new Date(timestamp));
    
    document.getElementById('modalShiftTitle').textContent = `${date} at ${time}`;
    
    let rolesHTML = `<div class="role-item"><span class="role-label">📋 Host:</span><span class="role-name">${shift.host || 'TBD'}</span></div>`;
    if(shift.cohost) rolesHTML += `<div class="role-item"><span class="role-label">🤝 Co-Host:</span><span class="role-name">${shift.cohost}</span></div>`;
    if(shift.overseer) rolesHTML += `<div class="role-item"><span class="role-label">👁️ Overseer:</span><span class="role-name">${shift.overseer}</span></div>`;
    document.getElementById('modalRoles').innerHTML = rolesHTML;
    
    await renderModalAttendees();
    
    shiftModal.style.display = 'block';
  }

  async function renderModalAttendees() {
    if (!currentShiftId) return;
    
    const container = document.getElementById('modalAttendees');
    const addBox = document.getElementById('modalAddAttendee');
    
    try {
      const res = await fetch(`/shifts/attendees?shiftId=${currentShiftId}`);
      const attendees = res.ok ? await res.json() : [];
      
      const shiftRes = await fetch('/shifts');
      const shifts = shiftRes.ok ? await shiftRes.json() : [];
      const currentShift = shifts.find(s => s.id === currentShiftId);
      
      const isShiftLeader = currentShift && currentUser && (
        currentShift.host === currentUser.username ||
        currentShift.cohost === currentUser.username ||
        currentShift.overseer === currentUser.username
      );
      
      const canEdit = DIRECTOR_PLUS.includes(userGroupRank) || isShiftLeader;
      
      document.getElementById('modalAttendeeCount').textContent = attendees.length;
      
      const labelsPromises = attendees.map(async a => {
        try {
          const labelRes = await fetch(`/settings/labels/${a.roblox_id}`);
          const labels = labelRes.ok ? await labelRes.json() : [];
          return { ...a, labels };
        } catch {
          return { ...a, labels: [] };
        }
      });
      
      const attendeesWithLabels = await Promise.all(labelsPromises);
      
      const management = attendeesWithLabels.filter(a => a.labels.includes('Management'));
      const publicRelations = attendeesWithLabels.filter(a => a.labels.includes('Public Relations'));
      const operations = attendeesWithLabels.filter(a => a.labels.includes('Operations'));
      const humanResources = attendeesWithLabels.filter(a => a.labels.includes('Human Resources'));
      const others = attendeesWithLabels.filter(a => a.labels.length === 0);
      
      container.innerHTML = '';
      
      if (management.length > 0) {
        const managementDiv = document.createElement('div');
        managementDiv.className = 'attendee-category';
        managementDiv.innerHTML = '<div class="attendee-category-title">Management</div>';
        
        management.forEach(a => {
          const box = createAttendeeBox(a, canEdit);
          managementDiv.appendChild(box);
        });
        
        container.appendChild(managementDiv);
      }
      
      if (publicRelations.length > 0) {
        const prDiv = document.createElement('div');
        prDiv.className = 'attendee-category';
        prDiv.innerHTML = '<div class="attendee-category-title">Public Relations</div>';
        
        publicRelations.forEach(a => {
          const box = createAttendeeBox(a, canEdit);
          prDiv.appendChild(box);
        });
        
        container.appendChild(prDiv);
      }
      
      if (operations.length > 0) {
        const opsDiv = document.createElement('div');
        opsDiv.className = 'attendee-category';
        opsDiv.innerHTML = '<div class="attendee-category-title">Operations</div>';
        
        operations.forEach(a => {
          const box = createAttendeeBox(a, canEdit);
          opsDiv.appendChild(box);
        });
        
        container.appendChild(opsDiv);
      }
      
      if (humanResources.length > 0) {
        const hrDiv = document.createElement('div');
        hrDiv.className = 'attendee-category';
        hrDiv.innerHTML = '<div class="attendee-category-title">Human Resources</div>';
        
        humanResources.forEach(a => {
          const box = createAttendeeBox(a, canEdit);
          hrDiv.appendChild(box);
        });
        
        container.appendChild(hrDiv);
      }
      
      if (others.length > 0) {
        const othersDiv = document.createElement('div');
        othersDiv.className = 'attendee-category';
        othersDiv.innerHTML = '<div class="attendee-category-title">Other Attendees</div>';
        
        others.forEach(a => {
          const box = createAttendeeBox(a, canEdit);
          othersDiv.appendChild(box);
        });
        
        container.appendChild(othersDiv);
      }

      if (canEdit) {
        addBox.style.display = 'flex';
        addBox.onclick = async e => {
          e.stopPropagation();
          if(addBox.querySelector('select')) return;

          const res = await fetch('/dashboard/players');
          const allPlayers = res.ok ? await res.json() : [];
          
          const eligiblePlayers = allPlayers.filter(p => DIRECTOR_PLUS.includes(p.group_rank));
          
          const select = document.createElement('select');
          select.style.width = '100%';
          select.style.padding = '8px';
          select.style.fontSize = '14px';
          select.style.border = '1px solid #42b4ff';
          select.style.borderRadius = '6px';
          select.innerHTML = '<option value="">Select player (Mochi Director+)...</option>' + eligiblePlayers.map(p => `<option value="${p.roblox_id}|${p.username}">${p.username} - ${p.group_rank}</option>`).join('');

          addBox.style.background = '#fff';
          addBox.style.border = '2px solid #42b4ff';
          addBox.innerHTML = '';
          addBox.appendChild(select);
          select.focus();

          select.onchange = async () => {
            if(select.value){
              const [robloxId, username] = select.value.split('|');
              await fetch('/shifts/add-attendee', {
                method:'POST',
                headers:{'Content-Type':'application/json'},
                body: JSON.stringify({shiftId: currentShiftId, robloxId, username})
              });
              await renderModalAttendees();
            } else resetAddBox();
          };

          select.onblur = () => setTimeout(resetAddBox, 200);

          function resetAddBox(){
            addBox.style.background = '#e6f3ff';
            addBox.style.border = '2px dashed #42b4ff';
            addBox.innerHTML = '+ Add attendee';
          }
        };
      } else {
        addBox.style.display = 'none';
      }
    } catch(err) {
      console.error('Error loading attendees:', err);
    }
  }
  
  function createAttendeeBox(attendee, canEdit) {
    const box = document.createElement('div');
    box.className = 'attendee-box';
    
    if (canEdit) {
      box.innerHTML = `<span>${attendee.username}</span><button data-robloxid="${attendee.roblox_id}">×</button>`;
      const removeBtn = box.querySelector('button');
      if (removeBtn) {
        removeBtn.addEventListener('click', async (e) => {
          e.stopPropagation();
          await fetch('/shifts/remove-attendee', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({shiftId: currentShiftId, robloxId: attendee.roblox_id})
          });
          renderModalAttendees();
        });
      }
    } else {
      box.innerHTML = `<span>${attendee.username}</span>`;
    }
    
    return box;
  }

  window.closeShiftModal = function() {
    shiftModal.style.display = 'none';
    currentShiftId = null;
  };

  window.onclick = function(e) {
    if (e.target === shiftModal) closeShiftModal();
  };

  async function loadShifts(){
    shiftsList.innerHTML = `<div class="no-data">Fetching shifts...</div>`;
    try{
      const res = await fetch('/shifts');
      if(!res.ok) throw new Error(`HTTP ${res.status}`);
      const shifts = await res.json();

      const now = Date.now();

      const sortedShifts = shifts.sort((a,b)=> {
        const timeA = a.shift_time || a.time;
        const timeB = b.shift_time || b.time;
        const tsA = timeA.toString().length === 10 ? timeA * 1000 : timeA;
        const tsB = timeB.toString().length === 10 ? timeB * 1000 : timeB;
        return tsA - tsB;
      });

      if(!sortedShifts.length){
        shiftsList.innerHTML = '<div class="no-data">No shifts found.</div>';
        return;
      }

      // Group shifts by day of the week
      const shiftsByDay = {};
      const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      
      sortedShifts.forEach(shift => {
        const shiftTime = shift.shift_time || shift.time;
        const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
        const shiftDate = new Date(timestamp);
        const dayOfWeek = dayNames[shiftDate.getDay()];
        
        if (!shiftsByDay[dayOfWeek]) {
          shiftsByDay[dayOfWeek] = [];
        }
        
        shiftsByDay[dayOfWeek].push(shift);
      });

      shiftsList.innerHTML = '';
      
      // Create sections for each day that has shifts
      for (const dayOfWeek of dayNames) {
        if (shiftsByDay[dayOfWeek] && shiftsByDay[dayOfWeek].length > 0) {
          // Create day header
          const dayHeader = document.createElement('div');
          dayHeader.className = 'attendee-category-title';
          dayHeader.textContent = dayOfWeek;
          shiftsList.appendChild(dayHeader);
          
          // Create container for this day's shifts
          const dayShiftsContainer = document.createElement('div');
          dayShiftsContainer.className = 'shifts-list';
          shiftsList.appendChild(dayShiftsContainer);
          
          // Add shifts for this day
          shiftsByDay[dayOfWeek].forEach((shift) => {
            const shiftTime = shift.shift_time || shift.time;
            const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
            const {date, time} = formatShiftTime(new Date(timestamp));
            const isPast = timestamp < now;

            const card = document.createElement('div');
            card.className = 'shift-card';
            card.style.cursor = 'pointer';
            card.addEventListener('click', () => openShiftModal(shift));

            card.innerHTML = `
              <div class="shift-header">
                <div class="shift-left">
                  <span class="shift-icon">📅</span>
                  <div class="shift-info">
                    <div class="shift-datetime">${date} at ${time}</div>
                    <div class="shift-host-preview">Host: ${shift.host || 'TBD'}</div>
                  </div>
                </div>
                <span class="shift-arrow">${isPast ? '⏪' : '→'}</span>
              </div>
              ${isPast ? '<div style="margin-top:8px;color:#888;font-weight:600;font-size:14px;">Past Shift</div>' : ''}
            `;
            dayShiftsContainer.appendChild(card);
          });
          
          // Add spacing after each day section
          const spacer = document.createElement('div');
          spacer.style.marginBottom = '20px';
          shiftsList.appendChild(spacer);
        }
      }

    } catch(err){
      console.error('Failed to load shifts:', err);
      shiftsList.innerHTML = '<div class="no-data">Failed to load shifts.</div>';
    }
  }

  loadShifts();
  setInterval(loadShifts, 60000);

window.openAddPlayer = async function() {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: Adding players requires Vice Chairman+');
      return;
    }

    const modal = document.getElementById('shiftModal');
    const modalTitle = document.getElementById('modalShiftTitle');
    const modalBody = document.querySelector('.modal-body');
    
    modalTitle.textContent = 'Add New Player';
    modalBody.innerHTML = `
      <form id="addPlayerForm" style="display:flex;flex-direction:column;gap:15px;">
        <div>
          <label style="display:block;font-weight:600;margin-bottom:5px;">Roblox ID *</label>
          <input type="number" id="newRobloxId" required 
                 style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;">
        </div>
        <div>
          <label style="display:block;font-weight:600;margin-bottom:5px;">Username *</label>
          <input type="text" id="newUsername" required 
                 style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;">
        </div>
        <div>
          <label style="display:block;font-weight:600;margin-bottom:5px;">Group Rank *</label>
          <input type="text" id="newGroupRank" required 
                 style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;">
        </div>
        <div>
          <label style="display:block;font-weight:600;margin-bottom:5px;">Avatar URL *</label>
          <input type="url" id="newAvatarUrl" required 
                 style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;"
                 placeholder="https://...">
        </div>
        <div>
          <label style="display:block;font-weight:600;margin-bottom:5px;">Password (6-digit)</label>
          <div style="display:flex;gap:10px;">
            <input type="text" id="newPassword" readonly 
                   style="flex:1;padding:10px;border:1px solid #ccc;border-radius:8px;background:#f9f9f9;">
            <button type="button" onclick="generatePassword()" class="btn">Generate</button>
          </div>
        </div>
        <div style="display:flex;gap:10px;justify-content:flex-end;margin-top:10px;">
          <button type="button" onclick="closeShiftModal()" class="btn" style="background:#ccc;color:#333;">Cancel</button>
          <button type="submit" class="btn">Add Player</button>
        </div>
      </form>
    `;
    
    modal.style.display = 'block';
    
    document.getElementById('addPlayerForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const robloxId = document.getElementById('newRobloxId').value;
      const username = document.getElementById('newUsername').value;
      const groupRank = document.getElementById('newGroupRank').value;
      const avatarUrl = document.getElementById('newAvatarUrl').value;
      const password = document.getElementById('newPassword').value;
      
      if (!password) {
        alert('Please generate a password first');
        return;
      }
      
      try {
        const res = await fetch('/settings/add-player', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            roblox_id: robloxId,
            username: username,
            group_rank: groupRank,
            avatar_url: avatarUrl,
            password: password
          })
        });
        
        const result = await res.json();
        
        if (res.ok) {
          alert(`Player added successfully!\n\nUsername: ${username}\nPassword: ${password}\n\nMake sure to save this password!`);
          closeShiftModal();
          
          if (allPlayersData.length) {
            loadPlayerList();
          }
        } else {
          alert(`Failed to add player: ${result.error || 'Unknown error'}`);
        }
      } catch (err) {
        console.error('Error adding player:', err);
        alert('Error adding player. Please try again.');
      }
    });
  };

  window.generatePassword = async function() {
    try {
      const res = await fetch('/settings/generate-password');
      const data = await res.json();
      
      if (data.password) {
        document.getElementById('newPassword').value = data.password;
      } else {
        alert('Failed to generate password');
      }
    } catch (err) {
      console.error('Error generating password:', err);
      alert('Error generating password');
    }
  };

  async function renderUpcomingBirthdays() {
    try {
      const res = await fetch('/settings/birthdays');
      if (!res.ok) {
        document.getElementById('upcomingBirthdays').innerHTML = '<div class="no-data">Unable to load birthdays</div>';
        return;
      }
      
      const birthdays = await res.json();
      const today = new Date();
      
      const upcoming = birthdays.map(b => {
        const bday = new Date(b.birthday);
        const bdayThisYear = new Date(today.getFullYear(), bday.getMonth(), bday.getDate());
        
        if (bdayThisYear < today) {
          bdayThisYear.setFullYear(today.getFullYear() + 1);
        }
        
        const daysUntil = Math.floor((bdayThisYear - today) / (1000 * 60 * 60 * 24));
        
        return { ...b, daysUntil, date: bdayThisYear, isToday: daysUntil === 0 };
      })
      .filter(b => b.daysUntil <= 30)
      .sort((a, b) => a.daysUntil - b.daysUntil)
      .slice(0, 3);
      
      const birthdaysGrid = document.getElementById('upcomingBirthdays');
      
      if (!upcoming.length) {
        birthdaysGrid.innerHTML = '<div class="no-data">No birthdays in the next 30 days</div>';
        return;
      }
      
      const playersRes = await fetch('/dashboard/players');
      const allPlayers = playersRes.ok ? await playersRes.json() : [];
      
      birthdaysGrid.innerHTML = upcoming.map(b => {
        const player = allPlayers.find(p => p.roblox_id === b.roblox_id);
        const avatarUrl = player?.avatar_url || 'https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';
        const dayText = b.isToday ? 'Today!' : `In ${b.daysUntil} day${b.daysUntil !== 1 ? 's' : ''}`;
        
        return `
          <div class="player-card" onclick="window.location='/dashboard/player/${b.username}'">
            <div class="avatar-wrapper">
              <img src="${avatarUrl}" onerror="this.src='https://placehold.co/80x80/e0e6f0/5f6c7b?text=U';"/>
              ${b.isToday ? '<span class="birthday-badge">🎂</span>' : ''}
            </div>
            <div>${b.username}</div>
            <div class="time" style="${b.isToday ? 'color:#ff4444;font-weight:700;' : ''}">${dayText}</div>
          </div>`;
      }).join('');
    } catch(err) {
      console.error('Error loading birthdays:', err);
      document.getElementById('upcomingBirthdays').innerHTML = '<div class="no-data">Failed to load birthdays</div>';
    }
  }
  
  renderUpcomingBirthdays();
  setInterval(renderUpcomingBirthdays, 300000);

  window.openLabelsManager = async function() {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: Label management requires Vice Chairman+');
      return;
    }

    const modal = document.getElementById('shiftModal');
    const modalTitle = document.getElementById('modalShiftTitle');
    const modalBody = document.querySelector('.modal-body');
    
    modalTitle.textContent = 'Manage Player Labels';
    modalBody.innerHTML = `
      <div style="margin-bottom:20px;">
        <input type="text" id="labelSearch" placeholder="Search player..." 
               style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;margin-bottom:10px;">
        <div id="labelSearchResults" style="max-height:200px;overflow-y:auto;"></div>
      </div>
    `;
    
    modal.style.display = 'block';
    
    const searchInput = document.getElementById('labelSearch');
    const searchResults = document.getElementById('labelSearchResults');
    
    searchInput.addEventListener('input', async () => {
      const q = searchInput.value.trim();
      if (!q) { searchResults.innerHTML = ''; return; }
      
      const res = await fetch(`/settings/search-players?username=${encodeURIComponent(q)}`);
      const players = res.ok ? await res.json() : [];
      
      searchResults.innerHTML = players.map(p => `
        <div class="suggestion-item" onclick="managePlayerLabels(${p.roblox_id}, '${p.username}')">
          <img src="https://www.roblox.com/headshot-thumbnail/image?userId=${p.roblox_id}&width=40&height=40&format=png"
               onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';"/>
          <span>${p.username}</span>
        </div>
      `).join('');
    });
  };

  window.managePlayerLabels = async function(robloxId, username) {
    const res = await fetch(`/settings/labels/${robloxId}`);
    const currentLabels = res.ok ? await res.json() : [];
    
    const allLabels = ['Management', 'Public Relations', 'Operations', 'Human Resources'];
    
    const modalBody = document.querySelector('.modal-body');
    modalBody.innerHTML = `
      <h3 style="margin-bottom:15px;">Labels for ${username}</h3>
      <div style="display:flex;flex-direction:column;gap:10px;">
        ${allLabels.map(label => {
          const isActive = currentLabels.includes(label);
          return `
            <div style="display:flex;align-items:center;justify-content:space-between;padding:12px;background:${isActive ? '#e6f3ff' : '#f9f9f9'};border-radius:8px;border:2px solid ${isActive ? '#42b4ff' : '#eee'};">
              <span style="font-weight:600;">${label}</span>
              <button onclick="toggleLabel(${robloxId}, '${username}', '${label}', ${isActive})" 
                      style="padding:6px 16px;background:${isActive ? '#ff4444' : '#42b4ff'};color:white;border:none;border-radius:6px;cursor:pointer;font-weight:600;">
                ${isActive ? 'Remove' : 'Add'}
              </button>
            </div>
          `;
        }).join('')}
      </div>
      <button onclick="openLabelsManager()" style="margin-top:20px;width:100%;padding:12px;background:#42b4ff;color:white;border:none;border-radius:8px;font-weight:600;cursor:pointer;">
        ← Back to Search
      </button>
    `;
  };

  window.toggleLabel = async function(robloxId, username, label, isActive) {
    try {
      const method = isActive ? 'DELETE' : 'POST';
      const res = await fetch('/settings/labels', {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ roblox_id: robloxId, username: username, label: label })
      });
      
      if (res.ok) {
        managePlayerLabels(robloxId, username);
} else {
        alert('Failed to update label');
      }
    } catch (err) {
      alert('Error updating label');
    }
  };

  window.openBirthdaysManager = async function() {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: Birthday management requires Vice Chairman+');
      return;
    }

    const modal = document.getElementById('shiftModal');
    const modalTitle = document.getElementById('modalShiftTitle');
    const modalBody = document.querySelector('.modal-body');
    
    modalTitle.textContent = 'Manage Birthdays';
    modalBody.innerHTML = `
      <div style="margin-bottom:20px;">
        <input type="text" id="bdaySearch" placeholder="Search player..." 
               style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;margin-bottom:10px;">
        <div id="bdaySearchResults" style="max-height:200px;overflow-y:auto;"></div>
      </div>
      <div style="max-height:400px;overflow-y:auto;" id="birthdaysList">
        <div class="no-data">Loading...</div>
      </div>
    `;
    
    modal.style.display = 'block';
    
    const res = await fetch('/settings/birthdays');
    const birthdays = res.ok ? await res.json() : [];
    
    const list = document.getElementById('birthdaysList');
    if (!birthdays.length) {
      list.innerHTML = '<div class="no-data">No birthdays set</div>';
    } else {
      list.innerHTML = birthdays.map(b => `
        <div class="attendee-box">
          <div>
            <strong>${b.username}</strong><br>
            <span style="font-size:13px;color:#666;">${new Date(b.birthday).toLocaleDateString()}</span>
          </div>
          <button onclick="deleteBirthday(${b.roblox_id})">×</button>
        </div>
      `).join('');
    }
    
    const searchInput = document.getElementById('bdaySearch');
    const searchResults = document.getElementById('bdaySearchResults');
    
    searchInput.addEventListener('input', async () => {
      const q = searchInput.value.trim();
      if (!q) { searchResults.innerHTML = ''; return; }
      
      const res = await fetch(`/settings/search-players?username=${encodeURIComponent(q)}`);
      const players = res.ok ? await res.json() : [];
      
      searchResults.innerHTML = players.map(p => `
        <div class="suggestion-item" onclick="setBirthdayFor(${p.roblox_id}, '${p.username}')">
          <img src="https://www.roblox.com/headshot-thumbnail/image?userId=${p.roblox_id}&width=40&height=40&format=png"
               onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';"/>
          <span>${p.username}</span>
        </div>
      `).join('');
    });
  };

  window.setBirthdayFor = async function(robloxId, username) {
  if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
    alert('Access Denied: Birthday management requires Vice Chairman+');
    return;
  }

  const birthday = prompt(`Set birthday for ${username} (MM/DD):`);
  if (!birthday) return;
  
  const dateRegex = /^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])$/;
  if (!dateRegex.test(birthday)) {
    alert('Invalid date format. Use MM/DD (e.g., 03/15)');
    return;
  }
  
  // Convert MM/DD to a date string with year 2000 (arbitrary year for storage)
  const [month, day] = birthday.split('/');
  const birthdayWithYear = `2000-${month}-${day}`;
  
  try {
    const res = await fetch('/settings/birthdays/set', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ roblox_id: robloxId, username, birthday: birthdayWithYear })
    });
    
    if (res.ok) {
      alert('Birthday set successfully!');
      openBirthdaysManager();
      renderUpcomingBirthdays();
    } else {
      alert('Failed to set birthday');
    }
  } catch (err) {
    alert('Error setting birthday');
  }
};

  window.deleteBirthday = async function(robloxId) {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: Birthday management requires Vice Chairman+');
      return;
    }

    if (!confirm('Delete this birthday?')) return;
    
    try {
      const res = await fetch(`/settings/birthdays/${robloxId}`, { method: 'DELETE' });
      if (res.ok) {
        openBirthdaysManager();
        renderUpcomingBirthdays();
      }
    } catch (err) {
      alert('Error deleting birthday');
    }
  };

  window.openWeeklyResetStatus = async function() {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: Weekly reset requires Vice Chairman+');
      return;
    }

    const modal = document.getElementById('shiftModal');
    const modalTitle = document.getElementById('modalShiftTitle');
    const modalBody = document.querySelector('.modal-body');
    
    modalTitle.textContent = 'Weekly Reset Status';
    modalBody.innerHTML = '<div class="no-data">Loading...</div>';
    modal.style.display = 'block';
    
    try {
      const res = await fetch('/settings/weekly-reset/status');
      const data = await res.json();
      
      const nextReset = new Date(data.nextReset);
      const lastReset = data.lastReset ? new Date(data.lastReset) : null;
      
      modalBody.innerHTML = `
        <div style="line-height:2;">
          <p><strong>Next Reset:</strong> ${nextReset.toLocaleString()}</p>
          ${lastReset ? `<p><strong>Last Reset:</strong> ${lastReset.toLocaleString()}</p>` : ''}
          <p><strong>Players Affected:</strong> ${data.playersAffected}</p>
          <hr style="margin:20px 0;border:none;border-top:1px solid #e0e6f0;">
          <button onclick="manualReset()" style="width:100%;padding:12px;background:#ff4444;color:white;border:none;border-radius:8px;font-weight:600;cursor:pointer;">
            Manual Reset (Use with caution)
          </button>
        </div>
      `;
    } catch (err) {
      modalBody.innerHTML = '<div class="no-data" style="color:#e74c3c;">Failed to load reset status</div>';
    }
  };

  window.manualReset = async function() {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: Manual reset requires Vice Chairman+');
      return;
    }

    if (!confirm('Are you sure you want to manually reset weekly data? This will clear all player weekly minutes and save current data to history.')) return;
    
    try {
      const res = await fetch('/settings/weekly-reset/manual', { method: 'POST' });
      const result = await res.json();
      
      if (result.success) {
        alert(`Reset successful! ${result.playersAffected} players affected.`);
        openWeeklyResetStatus();
      } else {
        alert('Reset failed');
      }
    } catch (err) {
      alert('Error performing reset');
    }
  };

  window.openLastWeekHistory = async function() {
    if (!EXECUTIVE_RANKS.includes(userGroupRank)) {
      alert('Access Denied: History requires Vice Chairman+');
      return;
    }

    const modal = document.getElementById('shiftModal');
    const modalTitle = document.getElementById('modalShiftTitle');
    const modalBody = document.querySelector('.modal-body');
    
    modalTitle.textContent = 'Last Week\'s Data';
    modalBody.innerHTML = '<div class="no-data">Loading...</div>';
    modal.style.display = 'block';
    
    try {
      const res = await fetch('/settings/weekly-reset/last-week');
      const history = await res.json();
      
      if (!history.length) {
        modalBody.innerHTML = '<div class="no-data">No historical data available</div>';
        return;
      }
      
      const weekStart = new Date(history[0].week_start).toLocaleDateString();
      const weekEnd = new Date(history[0].week_end).toLocaleDateString();
      
      const sorted = history.sort((a, b) => b.total_minutes - a.total_minutes);
      
      modalBody.innerHTML = `
        <div style="margin-bottom:15px;text-align:center;color:#666;">
          Week: ${weekStart} - ${weekEnd}
        </div>
        <div style="max-height:500px;overflow-y:auto;">
          <table style="width:100%;border-collapse:collapse;">
            <thead>
              <tr style="background:#f0f8ff;text-align:left;">
                <th style="padding:8px;">Player</th>
                <th style="padding:8px;">Minutes</th>
                <th style="padding:8px;">Hosted</th>
                <th style="padding:8px;">Attended</th>
              </tr>
            </thead>
            <tbody>
              ${sorted.map(h => {
                const hours = Math.floor(h.total_minutes / 60);
                const mins = h.total_minutes % 60;
                return `
                  <tr style="border-bottom:1px solid #eee;">
                    <td style="padding:8px;font-weight:600;">${h.username}</td>
                    <td style="padding:8px;">${hours}h ${mins}m</td>
                    <td style="padding:8px;">${h.shifts_hosted}</td>
                    <td style="padding:8px;">${h.shifts_attended}</td>
                  </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      `;
    } catch (err) {
      modalBody.innerHTML = '<div class="no-data" style="color:#e74c3c;">Failed to load history</div>';
    }
  };
});
</script>
</body>
</html>
