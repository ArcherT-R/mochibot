<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Mochi Bar Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <style>
    /* Base Styles - Matching Screenshot Theme */
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background-color: #f0f0f0; /* Light grey background */
      color: #333;
    }

    header {
      background-color: #6cb4ee; /* Blue banner */
      color: black;
      padding: 25px 20px;
      text-align: center;
      font-size: 38px;
      font-weight: bold;
    }

    .container {
      padding: 20px;
      max-width: 1100px;
      margin: 30px auto;
      display: flex;
      gap: 25px;
      flex-wrap: wrap;
      align-items: flex-start;
    }

    /* Column Styling - Grey Blocks */
    .column {
        background: #e0e0e0; /* Grey background for blocks */
        padding: 15px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        flex: 1 1 300px;
        min-width: 280px;
        box-sizing: border-box;
    }
    
    .column h2 {
        margin-top: 0;
        margin-bottom: 20px;
        font-size: 22px;
        font-weight: bold;
        color: #333;
        padding-bottom: 5px;
    }
    
    hr { 
        border: none; 
        border-top: 3px solid #000; /* Thick black line from screenshot */
        margin: 20px 0; 
    }

    /* Search Block Styling */
    .search-block, .list-block {
      background: #c0c0c0; /* Darker grey block matching player blocks */
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 15px;
      color: #000;
      font-weight: bold;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      font-size: 16px;
      border: none; /* No border for the theme */
      border-radius: 4px;
      box-sizing: border-box;
      background: white;
      font-weight: normal;
    }
    
    .search-box {
        position: relative;
        margin-bottom: 10px;
    }

    .suggestions {
      position: absolute;
      top: 100%;
      width: 100%;
      background: white;
      border: 1px solid #ccc;
      max-height: 250px;
      overflow-y: auto;
      z-index: 1000;
      left: 0;
    }

    .suggestion-item {
      display: flex;
      align-items: center;
      padding: 8px 10px;
      cursor: pointer;
      transition: background 0.2s;
      border-bottom: 1px solid #eee;
      color: #333;
      font-weight: normal;
    }

    .suggestion-item:hover {
      background-color: #ddd;
    }

    .suggestion-item img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      margin-right: 10px;
    }

    /* Shift/Session Specific Styles */
    .shifts-scroll {
        max-height: 500px;
        overflow-y: auto;
        padding-right: 10px;
    }
    
    .shift-item {
        background: #c0c0c0; /* Darker grey block for individual shifts */
        padding: 15px;
        border-radius: 4px;
        margin-bottom: 15px;
        color: #000;
        font-weight: bold;
    }
    
    .shift-time {
        font-weight: bold;
        color: #6cb4ee; /* Blue for time highlight */
        margin-bottom: 5px;
    }
    .shift-details span {
        font-weight: normal;
        display: block;
        margin-top: 5px;
        font-size: 0.95em;
    }
    
    /* Top Player Styles */
    .top-players-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
    }
    
    .player-card {
        background: #c0c0c0;
        padding: 10px;
        border-radius: 4px;
        text-align: center;
        cursor: pointer;
        font-weight: bold;
        color: #000;
    }

  </style>
</head>
<body>
  <header>Mochi Bar Database</header>

  <div class="container">
    
    <div class="column" style="flex: 2 1 600px;">
        <h2>Upcoming Shifts (Discord)</h2>
        <div class="shifts-scroll">
            <div id="shiftsList">
                <div class="shift-item" style="text-align: center;">Loading upcoming shifts...</div>
            </div>
        </div>
    </div>
    
    <div class="column" style="flex: 1 1 300px;">
        
        <h2>Player Lookup</h2>
        <div class="search-box">
            <div class="search-block" style="padding: 5px 10px;">
                <input type="text" id="playerSearch" placeholder="Search Roblox username..." />
            </div>
            <div id="suggestions" class="suggestions"></div>
        </div>
        
        <hr>

        <h2>Top Active This Week</h2>
        <div class="top-players-grid">
          <% if (topPlayers && topPlayers.length > 0) { %>
            <% topPlayers.slice(0, 4).forEach(player => { %>
              <div class="player-card" onclick="window.location='/dashboard/player/<%= player.username %>'">
                <img src="<%= player.avatar_url %>" alt="Avatar" style="width: 50px; height: 50px; border-radius: 50%; margin-bottom: 5px;" />
                <div><%= player.username %></div>
                <div style="font-size: 0.8em; font-weight: normal;"><%= player.weekly_minutes %> min</div>
              </div>
            <% }) %>
          <% } else { %>
            <div class="player-card" style="grid-column: span 2; font-weight: normal;">No active players data.</div>
          <% } %>
        </div>
        
    </div>
    
  </div>

  <script>
    const input = document.getElementById("playerSearch");
    const suggestionsBox = document.getElementById("suggestions");
    const shiftsList = document.getElementById("shiftsList");

    // --- Search Logic ---
    input.addEventListener("input", async () => {
      const query = input.value.trim();
      if (!query) {
        suggestionsBox.innerHTML = "";
        return;
      }

      try {
        const res = await fetch(`/dashboard/search?username=${encodeURIComponent(query)}`);
        const players = await res.json();

        suggestionsBox.innerHTML = players.map(p => `
          <div class="suggestion-item" onclick="window.location='/dashboard/player/${p.username}'">
            <img src="${p.avatar_url}" alt="Avatar" onerror="this.src='https://placehold.co/40x40/e0e6f0/5f6c7b?text=U';" />
            <span>${p.username}</span>
          </div>
        `).join("");
      } catch (err) {
        console.error("Search error:", err);
      }
    });

    document.addEventListener("click", e => {
      if (!input.contains(e.target) && !suggestionsBox.contains(e.target)) {
        suggestionsBox.innerHTML = "";
      }
    });
    
    // --- Shift Loading Logic ---
    
    function formatShiftTime(timestamp) {
        // Discord timestamps are in seconds, convert to milliseconds
        const date = new Date(timestamp * 1000); 
        
        const dateString = date.toLocaleDateString(undefined, {
            weekday: 'short',
            month: 'short',
            day: 'numeric'
        });
        
        const timeString = date.toLocaleTimeString(undefined, { 
            hour: '2-digit', 
            minute: '2-digit',
            timeZoneName: 'short'
        });
        
        return `${dateString} @ ${timeString}`;
    }

    async function loadShifts() {
        shiftsList.innerHTML = '<div class="shift-item" style="text-align: center;">Fetching data from Discord...</div>';

        try {
            const response = await fetch('/sessions');
            const sessions = await response.json();

            if (sessions.error) {
                shiftsList.innerHTML = `<div class="shift-item" style="color: red; text-align: center;">Error: ${sessions.error}</div>`;
                return;
            }

            // Filter for sessions that are in the future
            const nowSeconds = Math.floor(Date.now() / 1000);
            const upcomingSessions = sessions
                .filter(s => s.time > nowSeconds)
                .sort((a, b) => a.time - b.time); 

            if (upcomingSessions.length === 0) {
                shiftsList.innerHTML = '<div class="shift-item" style="text-align: center;">No upcoming shifts are currently scheduled.</div>';
                return;
            }

            shiftsList.innerHTML = '';
            upcomingSessions.forEach(session => {
                const shiftItem = document.createElement('div');
                shiftItem.className = 'shift-item';
                
                let participants = `Host: ${session.host}`;
                if (session.cohost) {
                    participants += ` | Co-Host: ${session.cohost}`;
                }
                
                shiftItem.innerHTML = `
                    <div class="shift-time">${formatShiftTime(session.time)}</div>
                    <div class="shift-details">
                        <span>${participants}</span>
                        ${session.overseer ? `<span>Overseer: ${session.overseer}</span>` : ''}
                    </div>
                `;
                shiftsList.appendChild(shiftItem);
            });

        } catch (error) {
            console.error("Error loading shifts:", error);
            shiftsList.innerHTML = '<div class="shift-item" style="color: red; text-align: center;">Failed to load scheduled shifts.</div>';
        }
    }

    // Call the function when the page loads
    loadShifts();
  </script>
</body>
</html>
