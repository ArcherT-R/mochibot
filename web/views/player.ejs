<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Mochi Bar Database - <%= player.username %></title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
<link rel="icon" type="image/png" href="https://i.ibb.co/S4NjLxNL/Gemini-Generated-Image-hbcyjkhbcyjkhbcy-removebg-preview.png">
<style>
  body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    background: #f7f9fc;
    color: #000;
  }

  header {
    background: linear-gradient(90deg, #42b4ff, #1a85e6, #42b4ff, #1a85e6);
    background-size: 300% 100%;
    animation: gradientFlow 6s ease infinite;
    color: white;
    font-weight: 700;
    font-size: 48px;
    padding: 25px 40px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.15);
  }

  @keyframes gradientFlow {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .back-button {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 10px 20px;
    background: white;
    color: #42b4ff;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 600;
    margin: 20px 0 0 40px;
    transition: all 0.3s;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .back-button:hover {
    background: #f0f8ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .container {
    max-width: 1400px;
    margin: 30px auto;
    display: flex;
    justify-content: space-between;
    gap: 30px;
    padding: 0 20px;
    flex-wrap: wrap;
  }

  .card {
    background: white;
    border-radius: 12px;
    padding: 25px;
    box-shadow: 0 6px 15px rgba(0,0,0,0.05);
    border: 1px solid #e0e6f0;
    display: flex;
    flex-direction: column;
    flex: 1;
    min-width: 320px;
  }

  .card h3 {
    font-size: 24px;
    font-weight: 700;
    color: #1a85e6;
    margin: 0 0 20px 0;
    padding-bottom: 15px;
    border-bottom: 2px solid #42b4ff;
  }

  .profile-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }

  .avatar-container {
    position: relative;
    width: 150px;
    height: 150px;
    border-radius: 50%;
    overflow: hidden;
    border: 4px solid #42b4ff;
    box-shadow: 0 4px 12px rgba(66, 180, 255, 0.3);
  }

  .avatar-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .birthday-badge-profile {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: white;
    width: 45px;
    height: 45px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 30px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: bounce 1s infinite;
  }

  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }

  .username-display {
    font-size: 28px;
    font-weight: 700;
    color: #333;
    text-align: center;
  }

  .info-grid {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  
  .label-badge {
    display: inline-block;
    padding: 4px 8px;
    background: #e6f3ff;
    color: #1a85e6;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
    margin-right: 5px;
    margin-bottom: 5px;
  }

  .info-item {
    background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
    padding: 15px 20px;
    border-radius: 8px;
    border-left: 4px solid #42b4ff;
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .info-label {
    font-size: 13px;
    font-weight: 600;
    color: #555;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .info-value {
    font-size: 16px;
    color: #333;
    font-weight: 500;
  }

  .session-item, .shift-item {
    background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
    padding: 16px 18px;
    border-radius: 8px;
    border-left: 4px solid #42b4ff;
    cursor: pointer;
    transition: all 0.3s;
    margin-bottom: 12px;
  }

  .session-item:hover, .shift-item:hover {
    transform: translateX(5px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .session-item.ongoing {
    border-left-color: #28a745;
    background: linear-gradient(135deg, #f0fff4 0%, #e6ffed 100%);
  }

  .session-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
  }

  .session-title {
    font-weight: 700;
    font-size: 16px;
    color: #1a85e6;
  }

  .session-title.live {
    color: #28a745;
  }

  .session-badge {
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
    background: #28a745;
    color: white;
  }

  .session-details {
    font-size: 14px;
    color: #555;
    line-height: 1.6;
  }

  #live-time {
    font-weight: 700;
    color: #28a745;
    font-size: 18px;
  }

  .sessions-scroll, .shifts-scroll {
    display: flex;
    flex-direction: column;
    max-height: 500px;
    overflow-y: auto;
  }

  .sessions-scroll::-webkit-scrollbar, .shifts-scroll::-webkit-scrollbar {
    width: 8px;
  }

  .sessions-scroll::-webkit-scrollbar-track, .shifts-scroll::-webkit-scrollbar-track {
    background: #f0f8ff;
    border-radius: 4px;
  }

  .sessions-scroll::-webkit-scrollbar-thumb, .shifts-scroll::-webkit-scrollbar-thumb {
    background: #42b4ff;
    border-radius: 4px;
  }

  .no-data {
    background: #f9f9f9;
    padding: 20px;
    text-align: center;
    border-radius: 8px;
    font-weight: 500;
    color: #777;
    border: 1px solid #eee;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
  }

  .stat-box {
    background: linear-gradient(135deg, #42b4ff 0%, #1a85e6 100%);
    color: white;
    padding: 18px;
    border-radius: 8px;
    text-align: center;
    box-shadow: 0 4px 12px rgba(66, 180, 255, 0.3);
  }

  .stat-number {
    font-size: 32px;
    font-weight: 700;
    display: block;
    margin-bottom: 4px;
  }

  .stat-label {
    font-size: 13px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    opacity: 0.9;
  }
  
  .label-badge {
    display: inline-block;
    padding: 4px 8px;
    background: #42b4ff;
    color: white;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
    margin-right: 5px;
    margin-bottom: 5px;
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.6);
    animation: fadeIn 0.3s;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .modal-content {
    background-color: white;
    margin: 10% auto;
    padding: 30px;
    border-radius: 12px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    animation: slideIn 0.3s;
  }

  @keyframes slideIn {
    from { transform: translateY(-50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #42b4ff;
  }

  .modal-header span:first-child {
    font-size: 22px;
    font-weight: 700;
    color: #1a85e6;
  }

  .close {
    color: #aaa;
    font-size: 32px;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.2s;
    line-height: 1;
  }

  .close:hover { color: #333; }

  .modal-body {
    font-size: 15px;
    color: #555;
    line-height: 1.8;
  }

  .modal-body p {
    margin: 12px 0;
    padding: 10px;
    background: #f0f8ff;
    border-radius: 6px;
  }

  .modal-body strong { color: #1a85e6; display: inline-block; min-width: 140px; }

  @media (max-width: 900px) {
    header { font-size: 36px; padding: 20px; }
    .container { flex-direction: column; }
    .card { min-width: 100%; }
    .stats-grid { grid-template-columns: 1fr; }
    .back-button { margin: 20px; }
  }
</style>
</head>
<body>

<header>Player Page</header>

<a href="/dashboard" class="back-button">
  <span>‚Üê</span>
  <span>Back to Dashboard</span>
</a>

<div class="container">

  <!-- Profile Card -->
  <div class="card">
    <h3>Player Profile</h3>
    <div class="profile-section">
      <div class="avatar-container">
        <img src="<%= player.avatar_url %>" alt="Avatar" onerror="this.src='https://placehold.co/150x150/e0e6f0/5f6c7b?text=<%= player.username.charAt(0) %>';">
        <div id="birthday-badge-container"></div>
      </div>
      <div class="username-display"><%= player.username %></div>
    </div>
    <div class="info-grid">
      <div class="info-item">
        <span class="info-label">üßë‚Äçüíº Group Rank</span>
        <span class="info-value"><%= player.group_rank %></span>
      </div>
      <div class="info-item">
        <span class="info-label">‚úâÔ∏è Roblox ID</span>
        <span class="info-value"><%= player.roblox_id %></span>
      </div>
      <div class="info-item">
        <span class="info-label">üìç Weekly Playtime</span>
        <span class="info-value"><%= Math.floor(player.weekly_minutes / 60) %> hrs <%= player.weekly_minutes % 60 %> min</span>
      </div>
      <div class="info-item">
        <span class="info-label">üè∑Ô∏è Labels</span>
        <span class="info-value" id="playerLabels">Loading...</span>
      </div>
      <div class="info-item">
        <span class="info-label">üéÇ Birthday</span>
        <span class="info-value" id="playerBirthday">Loading...</span>
      </div>
    </div>
  </div>

  <!-- Sessions Card -->
  <div class="card">
    <h3>Sessions</h3>
    
    <% if (ongoingSession) { 
       const startTime = new Date(ongoingSession.session_start_time).getTime();
    %>
      <div class="session-item ongoing" id="ongoing-session-box" onclick="showOngoingSessionModal(document.getElementById('session-start-time').value)">
        <div class="session-header">
          <span class="session-title live">üü¢ Ongoing Session</span>
          <span class="session-badge">LIVE</span>
        </div>
        <div class="session-details">
          Started: <%= new Date(startTime).toLocaleTimeString() %><br>
          Duration: <span id="live-time">00:00:00</span>
        </div>
        <input type="hidden" id="session-start-time" value="<%= startTime %>">
      </div>
    <% } %>

    <div class="sessions-scroll">
      <% if (sessions && sessions.length > 0) { %>
        <% sessions.slice(0, 10).forEach((s, index) => { %>
          <div class="session-item" onclick="showSessionDetails(<%= index %>, '<%= s.session_start %>')">
            <div class="session-header">
              <span class="session-title">‚¨ÖÔ∏è Past Session</span>
            </div>
            <div class="session-details">
              üïï Duration: <strong><%= s.minutes_played %> minutes</strong><br>
              <%= new Date(s.session_start).toLocaleDateString() %> at <%= new Date(s.session_start).toLocaleTimeString() %>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <div class="no-data">‚ùå No past sessions recorded</div>
      <% } %>
    </div>
  </div>

  <!-- Shifts Card -->
  <div class="card">
    <h3>Shifts Statistics</h3>
    
    <div class="stats-grid">
      <div class="stat-box" style="cursor:pointer;" onclick="toggleShiftsList('attended')">
        <span class="stat-number" id="attended-count">0</span>
        <span class="stat-label">Attended</span>
      </div>
      <div class="stat-box" style="cursor:pointer;" onclick="toggleShiftsList('hosted')">
        <span class="stat-number" id="hosted-count">0</span>
        <span class="stat-label">Hosted</span>
      </div>
    </div>

    <div id="attended-shifts-section" style="display:none; margin-top: 20px;">
      <h3 style="font-size: 18px; margin-bottom: 15px;">üóìÔ∏è Shifts Attended</h3>
      <div id="attended-shifts-list" class="shifts-scroll" style="max-height: 300px;">
        <div class="no-data">Loading...</div>
      </div>
    </div>

    <div id="hosted-shifts-section" style="display:none; margin-top: 20px;">
      <h3 style="font-size: 18px; margin-bottom: 15px;">Shifts Hosted</h3>
      <div id="hosted-shifts-list" class="shifts-scroll" style="max-height: 300px;">
        <div class="no-data">Loading...</div>
      </div>
    </div>

    <h3 style="margin-top: 25px; font-size: 18px;">Upcoming Shifts</h3>
    
    <div id="player-shifts" class="shifts-scroll">
      <div class="no-data">Loading scheduled shifts...</div>
    </div>
  </div>

</div>

<!-- Modal -->
<div id="sessionModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span id="modal-header-text"></span>
      <span class="close" onclick="closeModal()">&times;</span>
    </div>
    <div class="modal-body" id="modal-body">
      <!-- filled by JS -->
    </div>
  </div>
</div>

<script>
  const allSessions = JSON.parse('<%- JSON.stringify(sessions || []) %>');
  const playerUsername = "<%= player.username %>";
  const playerRobloxId = "<%= player.roblox_id %>";
  const normalizedPlayerName = playerUsername.replace(/\s/g, '').toLowerCase();
  const playerShiftsContainer = document.getElementById('player-shifts');

  // --- Check Birthday ---
  async function checkBirthday() {
    try {
      const res = await fetch('/settings/birthdays');
      if (!res.ok) return;
      
      const birthdays = await res.json();
      const playerBirthday = birthdays.find(b => b.roblox_id === parseInt(playerRobloxId));
      
      if (playerBirthday) {
        const today = new Date();
        const bday = new Date(playerBirthday.birthday);
        
        // Check if today is their birthday (month and day match)
        if (today.getMonth() === bday.getMonth() && today.getDate() === bday.getDate()) {
          const badgeContainer = document.getElementById('birthday-badge-container');
          badgeContainer.innerHTML = '<div class="birthday-badge-profile">üéÇ</div>';
        }
      }
    } catch (err) {
      console.error('Error checking birthday:', err);
    }
  }

  // --- Live Counter ---
  const startTimeInput = document.getElementById('session-start-time');
  if (startTimeInput) {
    const startTime = parseInt(startTimeInput.value, 10) || Date.now();
    function updateLiveCounter() {
      const elapsed = Date.now() - startTime;
      const totalSeconds = Math.floor(elapsed / 1000);
      const h = String(Math.floor(totalSeconds / 3600)).padStart(2,'0');
      const m = String(Math.floor((totalSeconds % 3600)/60)).padStart(2,'0');
      const s = String(totalSeconds % 60).padStart(2,'0');
      document.getElementById('live-time').textContent = `${h}:${m}:${s}`;
    }
    updateLiveCounter();
    setInterval(updateLiveCounter, 1000);
  }

  // --- Modal logic ---
  const modal = document.getElementById('sessionModal');

  function showSessionDetails(index, startTime) {
    const session = allSessions[index];
    if (!session) return;
    document.getElementById('modal-header-text').textContent = `‚úâÔ∏è Session Details`;
    document.getElementById('modal-body').innerHTML = `
      <p><strong>Duration:</strong> ${session.minutes_played} minutes</p>
      <p><strong>Started:</strong> ${new Date(startTime).toLocaleString()}</p>
      <p><strong>Ended:</strong> ${new Date(session.session_end).toLocaleString()}</p>
    `;
    modal.style.display = 'block';
  }

  function showOngoingSessionModal(startTime) {
    document.getElementById('modal-header-text').textContent = `üü¢ Ongoing Session`;
    document.getElementById('modal-body').innerHTML = `
      <p><strong>Started:</strong> ${new Date(startTime).toLocaleString()}</p>
      <p><strong>Current Duration:</strong> ${document.getElementById('live-time').textContent}</p>
      <p><strong>Status:</strong> <span style="color: #28a745; font-weight: 700;">LIVE NOW</span></p>
    `;
    modal.style.display = 'block';
  }

  function closeModal() { modal.style.display = 'none'; }
  window.onclick = function(e) { 
    if (e.target === modal) closeModal(); 
  }

  // --- Shifts Logic ---
  let currentOpenSection = null;

  function populateShiftsList(type) {
    const shifts = type === 'attended' ? window.pastAttendedShifts : window.pastHostedShifts;
    const listId = type === 'attended' ? 'attended-shifts-list' : 'hosted-shifts-list';
    const listElement = document.getElementById(listId);
    
    if (!shifts || shifts.length === 0) {
      listElement.innerHTML = '<div class="no-data">No shifts recorded</div>';
    } else {
      listElement.innerHTML = shifts.map(shift => {
        const date = new Date(shift.timestamp);
        const dateStr = date.toLocaleDateString(undefined, {
          weekday: 'long',
          month: 'long',
          day: 'numeric',
          year: 'numeric'
        });
        const timeStr = date.toLocaleTimeString(undefined, { hour: 'numeric', minute: '2-digit' });
        
        return `
          <div class="session-item" style="margin-bottom: 12px;">
            <div class="session-header">
              <span class="session-title">Shift</span>
            </div>
            <div class="session-details">
              ${dateStr} at ${timeStr}
              ${shift.host ? `<br>Host: <strong>${shift.host}</strong>` : ''}
            </div>
          </div>
        `;
      }).join('');
    }
  }

  function toggleShiftsList(type) {
    const sectionId = type === 'attended' ? 'attended-shifts-section' : 'hosted-shifts-section';
    const section = document.getElementById(sectionId);
    
    if (currentOpenSection === type) {
      section.style.display = 'none';
      currentOpenSection = null;
    } else {
      if (currentOpenSection) {
        const otherSection = currentOpenSection === 'attended' ? 'attended-shifts-section' : 'hosted-shifts-section';
        document.getElementById(otherSection).style.display = 'none';
      }
      populateShiftsList(type);
      section.style.display = 'block';
      currentOpenSection = type;
    }
  }

  window.toggleShiftsList = toggleShiftsList;

  // --- Load Player Shifts ---
  async function loadPlayerShifts() {
    try {
      const res = await fetch('/shifts');
      if (!res.ok) throw new Error('Failed to fetch shifts');
      
      const allShifts = await res.json();
      console.log('All shifts:', allShifts);
      
      const now = Date.now();
      
      const playerUpcomingShifts = [];
      const pastAttendedShifts = [];
      const pastHostedShifts = [];
      
      for (const shift of allShifts) {
        const shiftTime = shift.shift_time || shift.time;
        if (!shiftTime) continue;
        
        const timestamp = shiftTime.toString().length === 10 ? shiftTime * 1000 : shiftTime;
        
        let role = null;
        
        const hostNormalized = shift.host ? shift.host.replace(/\s/g, '').toLowerCase() : '';
        if (hostNormalized === normalizedPlayerName) {
          role = 'Host';
        }
        
        const cohostNormalized = shift.cohost ? shift.cohost.replace(/\s/g, '').toLowerCase() : '';
        if (cohostNormalized === normalizedPlayerName) {
          role = 'Co-Host';
        }
        
        const attendeesRes = await fetch(`/shifts/attendees?shiftId=${shift.id}`);
        if (attendeesRes.ok) {
          const attendees = await attendeesRes.json();
          const isAttendee = attendees.some(a => a.roblox_id === parseInt(playerRobloxId));
          if (isAttendee && !role) {
            role = 'Attendee';
          }
        }
        
        if (role) {
          const shiftData = { ...shift, role, timestamp };
          
          if (timestamp > now) {
            playerUpcomingShifts.push(shiftData);
          } else {
            if (role === 'Host' || role === 'Co-Host') {
              pastHostedShifts.push(shiftData);
            } else if (role === 'Attendee') {
              pastAttendedShifts.push(shiftData);
            }
          }
        }
      }
      
      playerUpcomingShifts.sort((a, b) => a.timestamp - b.timestamp);
      pastAttendedShifts.sort((a, b) => b.timestamp - a.timestamp);
      pastHostedShifts.sort((a, b) => b.timestamp - a.timestamp);
      
      console.log('Player upcoming shifts:', playerUpcomingShifts);
      console.log('Past attended shifts:', pastAttendedShifts);
      console.log('Past hosted shifts:', pastHostedShifts);
      
      document.getElementById('attended-count').textContent = pastAttendedShifts.length;
      document.getElementById('hosted-count').textContent = pastHostedShifts.length;
      
      window.pastAttendedShifts = pastAttendedShifts;
      window.pastHostedShifts = pastHostedShifts;
      
      playerShiftsContainer.innerHTML = '';
      if (playerUpcomingShifts.length === 0) {
        playerShiftsContainer.innerHTML = '<div class="no-data">No upcoming shifts scheduled</div>';
      } else {
        playerUpcomingShifts.forEach(shift => {
          const roleIcon = shift.role === 'Host' ? 'üìã' : shift.role === 'Co-Host' ? 'ü§ù' : 'üë•';
          const date = new Date(shift.timestamp);
          const dateStr = date.toLocaleDateString(undefined, { weekday: 'short', month: 'short', day: 'numeric' });
          const timeStr = date.toLocaleTimeString(undefined, { hour: 'numeric', minute: '2-digit' });
          
          const box = document.createElement('div');
          box.className = 'shift-item';
          box.innerHTML = `
            <div class="session-header">
              <span class="session-title">${roleIcon} ${shift.role}</span>
            </div>
            <div class="session-details">
              ${dateStr} at ${timeStr}<br>
              Host: <strong>${shift.host || 'TBD'}</strong>
            </div>
          `;
          playerShiftsContainer.appendChild(box);
        });
      }

    } catch (err) {
      console.error('Error loading shifts:', err);
      playerShiftsContainer.innerHTML = '<div class="no-data" style="color:#e74c3c; border-color: #e74c3c;">Failed to load shifts</div>';
    }
  }

  async function loadPlayerLabels() {
    try {
      const res = await fetch(`/settings/labels/${playerRobloxId}`);
      if (!res.ok) {
        document.getElementById('playerLabels').textContent = 'None';
        return;
      }
      
      const labels = await res.json();
      if (labels.length === 0) {
        document.getElementById('playerLabels').textContent = 'None';
      } else {
        document.getElementById('playerLabels').innerHTML = labels.map(label => 
          `<span class="label-badge">${label}</span>`
        ).join(' ');
      }
    } catch (err) {
      console.error('Error loading labels:', err);
      document.getElementById('playerLabels').textContent = 'Error loading labels';
    }
  }

  async function loadPlayerBirthday() {
    try {
      const res = await fetch('/settings/birthdays');
      if (!res.ok) {
        document.getElementById('playerBirthday').textContent = 'Not set';
        return;
      }
      
      const birthdays = await res.json();
      const playerBirthday = birthdays.find(b => b.roblox_id === parseInt(playerRobloxId));
      
      if (!playerBirthday) {
        document.getElementById('playerBirthday').textContent = 'Not set';
      } else {
        const bday = new Date(playerBirthday.birthday);
        document.getElementById('playerBirthday').textContent = bday.toLocaleDateString(undefined, {
          month: 'long',
          day: 'numeric'
        });
      }
    } catch (err) {
      console.error('Error loading birthday:', err);
      document.getElementById('playerBirthday').textContent = 'Error loading birthday';
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    checkBirthday();
    loadPlayerShifts();
    loadPlayerLabels();
    loadPlayerBirthday();
  });
</script>

</body>
</html>
