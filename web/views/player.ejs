<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Mochi Bar Database - <%= player.username %></title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
<style>
  body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    background: #fff;
  }

  header {
    background: #42b4ff;
    color: black;
    font-size: 48px;
    font-weight: 700;
    padding: 25px 40px;
    text-align: left;
  }

  .container {
    max-width: 1400px;
    margin: 30px auto;
    display: flex;
    justify-content: space-between;
    gap: 40px;
    padding: 0 20px;
    flex-wrap: wrap;
  }

  .column {
    background: #d9d9d9;
    flex: 1;
    min-width: 300px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-sizing: border-box;
  }

  .column h3 {
    font-size: 22px;
    font-weight: 700;
    text-align: center;
    margin-bottom: 20px;
  }

  .avatar-container {
    width: 180px;
    height: 160px;
    background: #b5b5b5;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
  }

  .avatar-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .content-block {
    background: #b5b5b5;
    width: 100%;
    text-align: center;
    padding: 15px 10px;
    font-size: 16px;
    margin-bottom: 15px;
    box-sizing: border-box;
  }

  .content-block.clickable:hover {
    background: #a7a7a7;
    cursor: pointer;
  }

  hr {
    width: 100%;
    border: none;
    border-top: 3px solid black;
    margin: 15px 0;
  }

  .sessions-scroll, .shifts-scroll {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  @media (max-width: 900px) {
    .container {
      flex-direction: column;
      gap: 20px;
    }
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 400px;
    border-radius: 6px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    margin-bottom: 10px;
  }

  .close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .close:hover {
    color: black;
  }

  #live-time {
    font-weight: 700;
    color: #28a745;
  }
</style>
</head>
<body>

<header>Mochi Bar Database</header>

<div class="container">

  <!-- Left Column -->
  <div class="column">
    <h3><%= player.username %></h3>
    <div class="avatar-container">
      <img src="<%= player.avatar_url %>" alt="Avatar" onerror="this.src='https://placehold.co/180x160?text=No+Image';">
    </div>
    <div class="content-block">Group Rank: <%= player.group_rank %></div>
    <div class="content-block">Notes: <%= player.notes || 'No notes' %></div>
  </div>

  <!-- Middle Column -->
  <div class="column">
    <h3>Sessions</h3>
    <% if (ongoingSession) { 
       const startTime = new Date(ongoingSession.session_start_time).getTime();
    %>
      <div class="content-block clickable" id="ongoing-session-box" onclick="showOngoingSessionModal(<%= startTime %>)">
        <strong>Ongoing Session</strong><br>
        Start: <%= new Date(startTime).toLocaleTimeString() %><br>
        Time: <span id="live-time">00:00:00</span>
        <input type="hidden" id="session-start-time" value="<%= startTime %>">
      </div>
    <% } else { %>
      <div class="content-block">No ongoing session</div>
    <% } %>

    <hr>

    <div class="sessions-scroll">
      <% if (sessions && sessions.length > 0) { %>
        <% sessions.slice(0, 4).forEach((s, index) => { %>
          <div class="content-block clickable" onclick="showSessionDetails(<%= index %>)">
            <strong>Past Session</strong><br>
            <span><%= s.minutes_played %> minutes</span>
          </div>
        <% }) %>
      <% } else { %>
        <div class="content-block">No past sessions</div>
      <% } %>
    </div>
  </div>

  <!-- Right Column -->
  <div class="column">
    <h3>Shifts</h3>
    <div class="content-block">Shift Attended: <%= shifts.attended || 0 %></div>
    <div class="content-block">Shift Hosted: <%= shifts.hosted || 0 %></div>
    <hr>
    <div id="player-shifts" class="shifts-scroll">
      <div class="content-block">Loading scheduled shifts...</div>
    </div>
  </div>

</div>

<!-- Modal -->
<div id="sessionModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span id="modal-header-text"></span>
      <span class="close" onclick="closeModal()">&times;</span>
    </div>
    <div class="modal-body" id="modal-body">
      <!-- filled by JS -->
    </div>
  </div>
</div>

<script>
  const allSessions = JSON.parse('<%- JSON.stringify(sessions || []) %>');
  const playerUsername = "<%= player.username %>";
  const normalizedPlayerName = playerUsername.replace(/\s/g, '').toLowerCase();
  const playerShiftsContainer = document.getElementById('player-shifts');

  // --- Live Counter ---
  const startTimeInput = document.getElementById('session-start-time');
  if (startTimeInput) {
    const startTime = parseInt(startTimeInput.value);
    function updateLiveCounter() {
      const elapsed = Date.now() - startTime;
      const totalSeconds = Math.floor(elapsed / 1000);
      const h = String(Math.floor(totalSeconds / 3600)).padStart(2,'0');
      const m = String(Math.floor((totalSeconds % 3600)/60)).padStart(2,'0');
      const s = String(totalSeconds % 60).padStart(2,'0');
      document.getElementById('live-time').textContent = `${h}:${m}:${s}`;
    }
    updateLiveCounter();
    setInterval(updateLiveCounter, 1000);
  }

  // --- Modal logic ---
  const modal = document.getElementById('sessionModal');

  function showSessionDetails(index) {
    const session = allSessions[index];
    if (!session) return;
    document.getElementById('modal-header-text').textContent = `Past Session`;
    document.getElementById('modal-body').innerHTML = `
      <p><strong>Minutes Played:</strong> ${session.minutes_played}</p>
      <p><strong>Session Start:</strong> ${new Date(session.session_start).toLocaleString()}</p>
      <p><strong>Session End:</strong> ${new Date(session.session_end).toLocaleString()}</p>
    `;
    modal.style.display = 'block';
  }

  function showOngoingSessionModal(startTime) {
    document.getElementById('modal-header-text').textContent = `Ongoing Session`;
    document.getElementById('modal-body').innerHTML = `
      <p><strong>Session Start:</strong> ${new Date(startTime).toLocaleString()}</p>
      <p><strong>Currently Running:</strong> ${document.getElementById('live-time').textContent}</p>
    `;
    modal.style.display = 'block';
  }

  function closeModal() {
    modal.style.display = 'none';
  }
  window.onclick = function(e) {
    if (e.target === modal) closeModal();
  }

  // --- Load Shifts ---
  async function loadPlayerShifts() {
    try {
      const res = await fetch('/sessions');
      const sessions = await res.json();
      const now = Math.floor(Date.now() / 1000);
      const relevant = sessions.filter(s => {
        const host = s.host ? s.host.replace(/\s/g, '').toLowerCase() : '';
        const cohost = s.cohost ? s.cohost.replace(/\s/g, '').toLowerCase() : '';
        return (host === normalizedPlayerName || cohost === normalizedPlayerName) && s.time > now;
      });

      playerShiftsContainer.innerHTML = '';

      if (relevant.length === 0) {
        playerShiftsContainer.innerHTML = '<div class="content-block">No upcoming shifts.</div>';
        return;
      }

      relevant.forEach(shift => {
        const isHost = shift.host.replace(/\s/g, '').toLowerCase() === normalizedPlayerName;
        const role = isHost ? 'Host' : 'Co-Host';
        const box = document.createElement('div');
        box.className = 'content-block';
        box.textContent = `${role} of shift on ${new Date(shift.time * 1000).toLocaleString()}`;
        playerShiftsContainer.appendChild(box);
      });

    } catch (err) {
      console.error(err);
      playerShiftsContainer.innerHTML = '<div class="content-block" style="color:red;">Failed to load shifts</div>';
    }
  }

  document.addEventListener('DOMContentLoaded', loadPlayerShifts);
</script>

</body>
</html>
