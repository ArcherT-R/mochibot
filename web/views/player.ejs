<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Mochi Bar - <%= player.username %></title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
<style>
Â  Â  /* Base Styles - Matching Screenshot Theme */
Â  Â  body {Â 
Â  Â  Â  Â  font-family: 'Roboto', sans-serif;Â 
Â  Â  Â  Â  background: #f0f0f0; /* Light grey background */
Â  Â  Â  Â  margin: 0;Â 
Â  Â  Â  Â  padding: 0;Â 
Â  Â  Â  Â  color: #333;
Â  Â  }
Â  Â  header {Â 
Â  Â  Â  Â  background: #6cb4ee; /* Blue banner */
Â  Â  Â  Â  padding: 25px 20px;Â 
Â  Â  Â  Â  text-align: center;Â 
Â  Â  Â  Â  font-size: 38px;
Â  Â  Â  Â  font-weight: bold;Â 
Â  Â  Â  Â  color: black; /* Text color matching screenshot */
Â  Â  Â  Â  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
Â  Â  }
Â  Â  .header-text {
Â  Â  Â  Â  font-size: 38px;
Â  Â  }
Â  Â  .container {Â 
Â  Â  Â  Â  max-width: 1100px;
Â  Â  Â  Â  margin: 30px auto;
Â  Â  Â  Â  padding: 20px;Â 
Â  Â  Â  Â  display: flex;Â 
Â  Â  Â  Â  gap: 25px;
Â  Â  Â  Â  flex-wrap: wrap;Â 
Â  Â  Â  Â  align-items: flex-start;
Â  Â  }

Â  Â  /* Column Styling - Grey Blocks */
Â  Â  .column {Â 
Â  Â  Â  Â  background: #e0e0e0; /* Grey background for column containers */
Â  Â  Â  Â  padding: 15px;
Â  Â  Â  Â  border-radius: 4px;
Â  Â  Â  Â  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
Â  Â  Â  Â  flex: 1;Â 
Â  Â  Â  Â  min-width: 280px;
Â  Â  Â  Â  box-sizing: border-box;Â 
Â  Â  }
Â  Â  .column h3 {Â 
Â  Â  Â  Â  margin-top: 0;Â 
Â  Â  Â  Â  margin-bottom: 20px;
Â  Â  Â  Â  font-size: 22px;Â 
Â  Â  Â  Â  font-weight: bold;Â 
Â  Â  Â  Â  color: #333;
Â  Â  Â  Â  padding-bottom: 5px;Â 
Â  Â  Â  Â  border-bottom: none; /* Removed column border to rely on blocks/HRs */
Â  Â  }

Â  Â  /* Profile Column Specifics */
Â  Â  .avatar-wrapper {
Â  Â  Â  Â  text-align: center;
Â  Â  Â  Â  margin-bottom: 20px;
Â  Â  Â  Â  background: #c0c0c0; /* Avatar placeholder block */
Â  Â  Â  Â  padding: 10px;
Â  Â  Â  Â  height: 140px;
Â  Â  Â  Â  display: flex;
Â  Â  Â  Â  align-items: center;
Â  Â  Â  Â  justify-content: center;
Â  Â  Â  Â  border-radius: 4px;
Â  Â  }
Â  Â  .avatar {Â 
Â  Â  Â  Â  width: 120px;
Â  Â  Â  Â  height: 120px;Â 
Â  Â  Â  Â  border-radius: 50%;Â 
Â  Â  Â  Â  border: 3px solid #6cb4ee;
Â  Â  Â  Â  object-fit: cover;
Â  Â  }

Â  Â  /* Generic Content Box Styling - Matching Screenshot Blocks */
Â  Â  .box {Â 
Â  Â  Â  Â  background: #c0c0c0; /* Darker grey block */
Â  Â  Â  Â  padding: 12px 15px;
Â  Â  Â  Â  border-radius: 4px;
Â  Â  Â  Â  margin-bottom: 15px;
Â  Â  Â  Â  word-wrap: break-word;Â 
Â  Â  Â  Â  font-size: 1.05em;
Â  Â  Â  Â  color: #000;
Â  Â  Â  Â  font-weight: bold;
Â  Â  }
Â  Â  .box strong { color: #000; }
    .box span { font-weight: normal; }


Â  Â  /* Separators */
Â  Â  hr {Â 
Â  Â  Â  Â  border: none;Â 
Â  Â  Â  Â  border-top: 3px solid #000; /* Thick black line from screenshot */
Â  Â  Â  Â  margin: 20px 0;Â 
Â  Â  }

Â  Â  /* Sessions Column */
Â  Â  .ongoing-session-box {
Â  Â  Â  Â  background: #f0f0f0; /* Slightly lighter grey for the active box */
Â  Â  Â  Â  border: 1px solid #6cb4ee; 
Â  Â  Â  Â  color: #333;
Â  Â  Â  Â  font-weight: bold;
Â  Â  Â  Â  text-align: center;
Â  Â  Â  Â  padding: 15px;
Â  Â  Â  Â  border-radius: 4px;
Â  Â  Â  Â  margin-bottom: 15px;
Â  Â  }
Â  Â  #live-time-wrapper { font-size: 1.1em; }
Â  Â  #live-time { font-size: 1.4em; color: #28a745; }

Â  Â  .sessions-scroll {
Â  Â  Â  Â  max-height: 380px; 
Â  Â  Â  Â  overflow-y: auto;
Â  Â  Â  Â  padding-right: 10px;
Â  Â  }

Â  Â  /* Past session card styling - Matching screenshot blocks */
Â  Â  .session-box {Â 
Â  Â  Â  Â  background: #c0c0c0;
Â  Â  Â  Â  padding: 10px 15px;Â 
Â  Â  Â  Â  border-radius: 4px;Â 
Â  Â  Â  Â  margin-bottom: 15px;Â 
Â  Â  Â  Â  cursor: pointer;Â 
Â  Â  Â  Â  transition: opacity 0.2s;
Â  Â  Â  Â  font-size: 1em;
Â  Â  Â  Â  color: #000;
Â  Â  Â  Â  font-weight: bold;
Â  Â  }
Â  Â  .session-box:hover { opacity: 0.8; }
    .session-box span { font-weight: normal; }


Â  Â  /* Shifts Column - Specific blocks */
    #upcoming-shifts-container {
        max-height: 400px;
        overflow-y: auto;
        padding-right: 10px;
    }
    .upcoming-shift-item {
        background: #c0c0c0; /* Use same block style for upcoming shifts */
        padding: 12px 15px;
        border-radius: 4px;
        margin-bottom: 15px;
        word-wrap: break-word;Â 
Â  Â  Â  Â  font-size: 1.05em;
Â  Â  Â  Â  color: #000;
Â  Â  Â  Â  font-weight: bold;
    }
    .upcoming-shift-item .time {
        font-weight: bold;
        color: #6cb4ee; /* Blue highlight */
        display: block;
        margin-bottom: 5px;
    }
    .upcoming-shift-item span {
        font-weight: normal;
        display: block;
    }
    
    /* Modal Styles (Kept clean for details) */
Â  Â  .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.5); }
Â  Â  .modal-content { background-color: #ffffff; margin: 10% auto; padding: 0; border-radius: 12px; width: 90%; max-width: 450px; box-shadow: 0 8px 25px rgba(0,0,0,0.3); }
Â  Â  .modal-header { background-color: #6cb4ee; color: white; padding: 15px 20px; text-align: center; font-weight: bold; font-size: 1.3em; border-top-left-radius: 12px; border-top-right-radius: 12px; position: relative; }
Â  Â  .modal-body { padding: 25px; line-height: 1.6; font-size: 1.05em; }
Â  Â  .modal-body p { margin-bottom: 12px; }
Â  Â  .modal-body strong { display: inline-block; width: 130px; color: #444; }
Â  Â  .close { color: white; float: right; font-size: 30px; font-weight: bold; position: absolute; right: 15px; top: 10px; line-height: 1; }
Â  Â  .close:hover, .close:focus { color: #eee; text-decoration: none; cursor: pointer; }

    /* Responsive adjustments */
Â  Â  @media (max-width: 768px) {
Â  Â  Â  Â  .container { flex-direction: column; gap: 20px; padding: 15px; }
Â  Â  Â  Â  .column { width: 100%; min-width: unset; }
Â  Â  Â  Â  header { font-size: 32px; }
Â  Â  }
</style>
</head>
<body>

<header><span class="header-text">Mochi Bar Database</span></header>

<div class="container">

Â  Â  <div class="column">
Â  Â  <h3>Username</h3>
Â  Â  <div class="avatar-wrapper">
Â  Â  Â  <img src="<%= player.avatar_url %>" alt="Avatar" class="avatar" onerror="this.src='https://placehold.co/120x120/e0e6f0/5f6c7b?text=Error';">
Â  Â  </div>
Â  Â  <div class="box"><strong><%= player.username %></strong></div>
Â  Â  <div class="box"><strong>Group Rank:</strong> <span><%= player.group_rank %></span></div>
Â  Â  <div class="box"><strong>Notes:</strong> <span><%= player.notes || 'No notes available.' %></span></div>
Â  </div>

Â  Â  <div class="column">
Â  Â  <h3>Sessions</h3>

Â  Â  Â  Â  <% if (ongoingSession) {Â 
Â  Â  Â  Â  const startTimeString = ongoingSession.session_start_time;
Â  Â  Â  Â  const startTime = startTimeString ? new Date(startTimeString).getTime() : Date.now();
Â  Â  %>
Â  Â  Â  <div class="ongoing-session-box" id="ongoing-session-box">
Â  Â  Â  Â  <strong>ðŸŸ¢ Ongoing Session</strong><br>
Â  Â  Â  Â  <span style="font-size: 0.9em; font-weight: normal;">Start: <%= new Date(startTime).toLocaleTimeString() %></span><br>
Â  Â  Â  Â  <div id="live-time-wrapper" style="margin-top: 5px;">Time: <span id="live-time">00:00:00</span></div>
Â  Â  Â  Â  <input type="hidden" id="session-start-time" value="<%= startTime %>">
Â  Â  Â  </div>
Â  Â  <% } else { %>
Â  Â  Â  <div class="box ongoing-session-box" style="background: #c0c0c0; border: none; text-align: center;">No ongoing session</div>
Â  Â  <% } %>

Â  Â  <hr>
Â  Â Â 
Â  Â  Â  Â  <div class="sessions-scroll">
Â  Â  Â  <% if (sessions && sessions.length > 0) { %>
Â  Â  Â  Â  <% sessions.slice(0,4).forEach((s, index) => { %>
Â  Â  Â  Â  Â  <div class="session-box" onclick="showSessionDetails(<%= index %>)">
Â  Â  Â  Â  Â  Â  <strong>Past Session <%= index + 1 %></strong><br>
Â  Â  Â  Â  Â  Â  <span>Minutes Played: <%= s.minutes_played %></span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  <% }) %>
Â  Â  Â  <% } else { %>
Â  Â  Â  Â  <div class="session-box" style="text-align: center;">No past sessions.</div>
Â  Â  Â  <% } %>
Â  Â  </div>
Â  </div>

Â  Â  <div class="column">
Â  Â  <h3>Shifts</h3>
Â  Â  
Â  Â  <div class="box">
        <strong>Shift Attended:</strong> <span><%= shifts.attended || 0 %></span>
    </div>
Â  Â  <div class="box" id="hosted-shift-count-box">
Â  Â      <strong>Shift Hosted:</strong> <span id="hosted-shift-count"><%= shifts.hosted || 0 %></span>
Â  Â  </div>
Â  Â Â 
Â  Â  <hr>
    
    <div id="upcoming-shifts-container">
        <div id="upcoming-shifts-list">
            <div class="upcoming-shift-item" style="text-align: center;">Loading scheduled shifts...</div>
        </div>
    </div>
Â  Â Â 
Â  Â  <hr>
    
Â  Â  Â  Â  <% if (shifts.coHosted && shifts.coHosted.length > 0) { %>
Â  Â  Â  <h4>Logged Co-Hosted</h4>
Â  Â  Â  <% shifts.coHosted.slice(0, 3).forEach(c => { %>
Â  Â  Â  Â  <div class="box">
Â  Â  Â  Â  Â  <strong>Shift:</strong> <span><%= c.name %></span><br>
Â  Â  Â  Â  Â  <span>Host: <%= c.host %></span>
Â  Â  Â  Â  </div>
Â  Â  Â  <% }) %>
Â  Â  <% } else { %>
Â  Â  Â  <div class="box" style="text-align: center;">No co-hosted shifts logged.</div>
Â  Â  <% } %>
Â  </div>

</div>

<div id="sessionModal" class="modal">
Â  <div class="modal-content">
Â  Â  <div class="modal-header">
Â  Â  Â  <span class="close" onclick="closeModal()">&times;</span>
Â  Â  Â  <span id="modal-header-text"><%= player.username %> - <%= player.group_rank %></span>
Â  Â  </div>
Â  Â  <div class="modal-body">
Â  Â  Â  <p><strong>Username:</strong> <span><%= player.username %></span></p>
Â  Â  Â  <p><strong>Time In Game:</strong> <span id="modal-minutes-played"></span> minutes</p>
Â  Â  Â  <p><strong>Session Start:</strong> <span id="modal-session-start"></span></p>
Â  Â  Â  <p><strong>Session End:</strong> <span id="modal-session-end"></span></p>
Â  Â  </div>
Â  </div>
</div>

<script>
Â  Â  // Data passed from server (full sessions list)
Â  Â  const allSessions = JSON.parse('<%- JSON.stringify(sessions || []) %>');
Â  Â  const playerUsername = "<%= player.username %>";
Â  Â  const playerRank = "<%= player.group_rank %>";
Â  Â  const modal = document.getElementById('sessionModal');

Â  Â  // Normalize username for reliable comparison with Discord usernames
    const normalizedPlayerName = playerUsername.replace(/\s/g, '').toLowerCase();

Â  Â  // Utility functions
Â  Â  function formatTime(ms) {
Â  Â  Â  Â  let totalSeconds = Math.floor(ms / 1000);
Â  Â  Â  Â  let hours = Math.floor(totalSeconds / 3600);
Â  Â  Â  Â  let minutes = Math.floor((totalSeconds % 3600) / 60);
Â  Â  Â  Â  let seconds = totalSeconds % 60;

Â  Â  Â  Â  const pad = num => String(num).padStart(2, '0');
Â  Â  Â  Â  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
Â  Â  }
    
    function formatShiftTime(timestamp) {
        // Discord timestamps are in seconds, convert to milliseconds
        const date = new Date(timestamp * 1000); 
        
        const dateString = date.toLocaleDateString(undefined, {
            weekday: 'short',
            month: 'short',
            day: 'numeric'
        });
        
        const timeString = date.toLocaleTimeString(undefined, { 
            hour: '2-digit', 
            minute: '2-digit',
            timeZoneName: 'short'
        });
        
        return `${dateString} @ ${timeString}`;
    }


Â  Â  /* ----------------------------------
Â  Â  Â * 1. Live Counter LogicÂ 
Â  Â  Â * ---------------------------------- */

Â  Â  const startTimeInput = document.getElementById('session-start-time');
Â  Â  if (startTimeInput) {
Â  Â  Â  Â  const startTimeMs = parseInt(startTimeInput.value);
Â  Â  Â  Â Â 
Â  Â  Â  Â  function updateLiveCounter() {
Â  Â  Â  Â  Â  Â  const elapsed = Date.now() - startTimeMs;Â 
Â  Â  Â  Â  Â  Â  document.getElementById('live-time').textContent = formatTime(elapsed);
Â  Â  Â  Â  }

Â  Â  Â  Â  updateLiveCounter();
Â  Â  Â  Â  setInterval(updateLiveCounter, 1000);
Â  Â  }


Â  Â  /* ----------------------------------
Â  Â  Â * 2. Modal/Clickable Session Logic
Â  Â  Â * ---------------------------------- */

Â  Â  function showSessionDetails(index) {
Â  Â  Â  Â  const session = allSessions[index];
Â  Â  Â  Â  if (!session) return;

Â  Â  Â  Â  const headerText = `${playerUsername} - ${playerRank}`;
Â  Â  Â  Â  document.getElementById('modal-header-text').textContent = headerText;

Â  Â  Â  Â  document.getElementById('modal-minutes-played').textContent = session.minutes_played;
Â  Â  Â  Â  document.getElementById('modal-session-start').textContent = new Date(session.session_start).toLocaleString();
Â  Â  Â  Â  document.getElementById('modal-session-end').textContent = new Date(session.session_end).toLocaleString();

Â  Â  Â  Â  modal.style.display = "block";
Â  Â  }

Â  Â  function closeModal() {
Â  Â  Â  Â  modal.style.display = "none";
Â  Â  }

Â  Â  window.onclick = function(event) {
Â  Â  Â  Â  if (event.target === modal) {
Â  Â  Â  Â  Â  Â  closeModal();
Â  Â  Â  Â  }
Â  Â  }
    
    
    /* ----------------------------------
     * 3. Discord Shift Integration Logic (NEW)
     * ---------------------------------- */
    
    async function loadPlayerShiftsFromDiscord() {
        const upcomingList = document.getElementById('upcoming-shifts-list');
        const hostedCountSpan = document.getElementById('hosted-shift-count');
        
        upcomingList.innerHTML = '<div class="upcoming-shift-item" style="text-align: center;">Fetching Discord data...</div>';

        try {
            const response = await fetch('/sessions');
            const sessions = await response.json();

            if (sessions.error) {
                upcomingList.innerHTML = `<div class="upcoming-shift-item" style="color: red; text-align: center;">Error: ${sessions.error}</div>`;
                return;
            }

            const nowSeconds = Math.floor(Date.now() / 1000);
            let hostedCount = Number(hostedCountSpan.textContent || 0); 
            
            const playerShifts = sessions.filter(session => {
                const normalizedHost = session.host ? session.host.replace(/\s/g, '').toLowerCase() : '';
                const normalizedCohost = session.cohost ? session.cohost.replace(/\s/g, '').toLowerCase() : '';
                
                const isHost = normalizedHost === normalizedPlayerName;
                const isCohost = normalizedCohost === normalizedPlayerName;
                
                if (isHost || isCohost) {
                    // If player was involved and shift has passed, increment hosted count
                    if (session.time < nowSeconds) {
                        hostedCount++; 
                        return false; 
                    }
                    // Keep upcoming shifts
                    return true;
                }
                
                return false;
            });
            
            // Update the total hosted count
            hostedCountSpan.textContent = hostedCount;

            // Sort upcoming shifts by time and show only the next 3
            const upcomingShifts = playerShifts
                .filter(s => s.time > nowSeconds)
                .sort((a, b) => a.time - b.time)
                .slice(0, 3); // LIMIT to the next 3

            // Display upcoming sessions
            if (upcomingShifts.length === 0) {
                upcomingList.innerHTML = '<div class="upcoming-shift-item" style="text-align: center;">No upcoming shifts scheduled.</div>';
            } else {
                upcomingList.innerHTML = '';
                upcomingShifts.forEach(session => {
                    const shiftItem = document.createElement('div');
                    shiftItem.className = 'upcoming-shift-item';
                    
                    const isPlayerHost = session.host.replace(/\s/g, '').toLowerCase() === normalizedPlayerName;
                    const role = isPlayerHost ? 'Host' : 'Co-Host';
                    
                    let hostInfo = `Host: ${session.host}`;
                    if (session.cohost && !isPlayerHost) {
                         hostInfo += ` | Co-Host: ${session.cohost}`;
                    } else if (session.cohost && isPlayerHost) {
                        hostInfo = `Co-Host: ${session.cohost}`;
                    }

                    shiftItem.innerHTML = `
                        <div class="time">Your Role: ${role}</div>
                        <span>${formatShiftTime(session.time)}</span>
                        <span>${hostInfo}</span>
                    `;
                    upcomingList.appendChild(shiftItem);
                });
            }

        } catch (error) {
            console.error("Error loading player shifts from Discord:", error);
            upcomingList.innerHTML = '<div class="upcoming-shift-item" style="color: red; text-align: center;">Failed to load scheduled shifts.</div>';
        }
    }

    // Initialize the Discord shift loading when the page loads
    loadPlayerShiftsFromDiscord();
</script>

</body>
</html>
